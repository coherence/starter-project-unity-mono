// <auto-generated>
// Generated file. DO NOT EDIT!
// Generated from schema 'Schema' [0x6798E4C]
// File created by coherence-code-generator development
// </auto-generated>



#region Shared
// -----------------------------------
//  Shared.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
    using System;
    using System.Collections.Generic;
	using Replication.Client.Unity.Ecs;


	

static class TypeIds
{
    // Note: The indexes of components/commands/events *should* start over from 0

	public const uint InternalWorldPosition = 0;

	public const uint InternalWorldOrientation = 1;

	public const uint InternalLocalUser = 2;

	public const uint InternalWorldPositionQuery = 3;

	public const uint InternalSessionBased = 4;

	public const uint InternalGenericPrefabReference = 5;

	public const uint InternalGenericScale = 6;

	public const uint InternalGenericFieldInt0 = 7;

	public const uint InternalGenericFieldInt1 = 8;

	public const uint InternalGenericFieldInt2 = 9;

	public const uint InternalGenericFieldInt3 = 10;

	public const uint InternalGenericFieldInt4 = 11;

	public const uint InternalGenericFieldInt5 = 12;

	public const uint InternalGenericFieldInt6 = 13;

	public const uint InternalGenericFieldInt7 = 14;

	public const uint InternalGenericFieldInt8 = 15;

	public const uint InternalGenericFieldInt9 = 16;

	public const uint InternalGenericFieldFloat0 = 17;

	public const uint InternalGenericFieldFloat1 = 18;

	public const uint InternalGenericFieldFloat2 = 19;

	public const uint InternalGenericFieldFloat3 = 20;

	public const uint InternalGenericFieldFloat4 = 21;

	public const uint InternalGenericFieldFloat5 = 22;

	public const uint InternalGenericFieldFloat6 = 23;

	public const uint InternalGenericFieldFloat7 = 24;

	public const uint InternalGenericFieldFloat8 = 25;

	public const uint InternalGenericFieldFloat9 = 26;

	public const uint InternalGenericFieldVector0 = 27;

	public const uint InternalGenericFieldVector1 = 28;

	public const uint InternalGenericFieldVector2 = 29;

	public const uint InternalGenericFieldVector3 = 30;

	public const uint InternalGenericFieldString0 = 31;

	public const uint InternalGenericFieldString1 = 32;

	public const uint InternalGenericFieldString2 = 33;

	public const uint InternalGenericFieldString4 = 34;

	public const uint InternalGenericCommand = 0;

}


enum TypeEnums
{

	InternalWorldPosition = 0,

	InternalWorldOrientation = 1,

	InternalLocalUser = 2,

	InternalWorldPositionQuery = 3,

	InternalSessionBased = 4,

	InternalGenericPrefabReference = 5,

	InternalGenericScale = 6,

	InternalGenericFieldInt0 = 7,

	InternalGenericFieldInt1 = 8,

	InternalGenericFieldInt2 = 9,

	InternalGenericFieldInt3 = 10,

	InternalGenericFieldInt4 = 11,

	InternalGenericFieldInt5 = 12,

	InternalGenericFieldInt6 = 13,

	InternalGenericFieldInt7 = 14,

	InternalGenericFieldInt8 = 15,

	InternalGenericFieldInt9 = 16,

	InternalGenericFieldFloat0 = 17,

	InternalGenericFieldFloat1 = 18,

	InternalGenericFieldFloat2 = 19,

	InternalGenericFieldFloat3 = 20,

	InternalGenericFieldFloat4 = 21,

	InternalGenericFieldFloat5 = 22,

	InternalGenericFieldFloat6 = 23,

	InternalGenericFieldFloat7 = 24,

	InternalGenericFieldFloat8 = 25,

	InternalGenericFieldFloat9 = 26,

	InternalGenericFieldVector0 = 27,

	InternalGenericFieldVector1 = 28,

	InternalGenericFieldVector2 = 29,

	InternalGenericFieldVector3 = 30,

	InternalGenericFieldString0 = 31,

	InternalGenericFieldString1 = 32,

	InternalGenericFieldString2 = 33,

	InternalGenericFieldString4 = 34,

	InternalGenericCommand = 0,

}


internal static class InternalGlobalLookups
{
	internal readonly static Dictionary<Type, TypeEnums> GlobalTypeToEnumLookup = new Dictionary<Type, TypeEnums>();

	internal static TypeEnums Lookup<T>()
	{
		return GlobalTypeToEnumLookup[typeof(T)];
	}

	internal static void Register<T>(TypeEnums e)
	{
		GlobalTypeToEnumLookup.Add(typeof(T), e);
	}
}

internal static class GlobalLookups
{
	internal readonly static Dictionary<System.Type, TypeEnums> GlobalTypeToEnumLookup =
		new Dictionary<System.Type, TypeEnums>();

	internal static TypeEnums Lookup<T>()
	{
		return GlobalTypeToEnumLookup[typeof(T)];
	}

	internal static void Register<T>(TypeEnums e)
	{
		if (!GlobalTypeToEnumLookup.ContainsKey(typeof(T))) {
			GlobalTypeToEnumLookup.Add(typeof(T), e);
		}
	}
}

internal static class GlobalTypeIdLookups
{
	internal readonly static Dictionary<System.Type, uint> GlobalTypeToEnumLookup =
		new Dictionary<System.Type, uint>();

	internal static uint Lookup<T>()
	{
		return GlobalTypeToEnumLookup[typeof(T)];
	}

	internal static (uint, bool) LookupUsingType(System.Type t)
	{
		var foundIt = GlobalTypeToEnumLookup.TryGetValue(t, out var value);
		return !foundIt ? ((uint, bool)) (0, foundIt) : (value, true);
	}

	internal static void Register<T>(uint e)
	{
		if (!GlobalTypeToEnumLookup.ContainsKey(typeof(T))) {
			GlobalTypeToEnumLookup.Add(typeof(T), e);
		}
	}
}

class GlobalTypeIdLookupsWrapper : ITypeIdLookups
{
	public (uint, bool) LookupUsingType(Type t)
	{
		return GlobalTypeIdLookups.LookupUsingType(t);
	}
}

static class RleConstants
{
	public const uint EndOfComponentArray = 255;
	public const uint EndOfComponentIndex = 65535;
}




} // end of namespace


// ------------------ end of Shared.cs -----------------
#endregion



#region SharedTypes
// -----------------------------------
//  SharedTypes.cs
// -----------------------------------
			
namespace Coherence.Generated.FirstProject
{

public static class Constants
{
	public const uint SchemaHash = 0x6798E4C;
}
		

// -------------------------------------------
// Shared Enum Types
// -------------------------------------------

// --- Shared Enum Types --


// -------------------------------------------
// Shared Struct Types
// -------------------------------------------

// --- Shared Struct Types --

}

// ------------------ end of SharedTypes.cs -----------------
#endregion



#region ComponentData
// -----------------------------------
//  ComponentData.cs
// -----------------------------------
			
namespace Coherence.Generated.FirstProject
{
	using Unity.Collections;
	using Unity.Entities;
	using Unity.Mathematics;
	using Unity.Transforms;

	
	
 
	
	
 
	
	
	// EcsComponentData: InternalLocalUserData
	public struct LocalUser : IComponentData
	{
		public int localIndex;
	}
	
	
	
	// EcsComponentData: InternalWorldPositionQueryData
	public struct WorldPositionQuery : IComponentData
	{
		public float3 position;
		public float radius;
	}
	
	
	
	// EcsComponentData: InternalSessionBasedData
	public struct SessionBased : IComponentData
	{
	}
	
	
	
	// EcsComponentData: InternalGenericPrefabReferenceData
	public struct GenericPrefabReference : IComponentData
	{
		public FixedString64 prefab;
	}
	
	
	
	// EcsComponentData: InternalGenericScaleData
	public struct GenericScale : IComponentData
	{
		public float3 Value;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldInt0Data
	public struct GenericFieldInt0 : IComponentData
	{
		public int number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldInt1Data
	public struct GenericFieldInt1 : IComponentData
	{
		public int number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldInt2Data
	public struct GenericFieldInt2 : IComponentData
	{
		public int number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldInt3Data
	public struct GenericFieldInt3 : IComponentData
	{
		public int number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldInt4Data
	public struct GenericFieldInt4 : IComponentData
	{
		public int number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldInt5Data
	public struct GenericFieldInt5 : IComponentData
	{
		public int number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldInt6Data
	public struct GenericFieldInt6 : IComponentData
	{
		public int number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldInt7Data
	public struct GenericFieldInt7 : IComponentData
	{
		public int number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldInt8Data
	public struct GenericFieldInt8 : IComponentData
	{
		public int number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldInt9Data
	public struct GenericFieldInt9 : IComponentData
	{
		public int number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldFloat0Data
	public struct GenericFieldFloat0 : IComponentData
	{
		public float number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldFloat1Data
	public struct GenericFieldFloat1 : IComponentData
	{
		public float number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldFloat2Data
	public struct GenericFieldFloat2 : IComponentData
	{
		public float number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldFloat3Data
	public struct GenericFieldFloat3 : IComponentData
	{
		public float number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldFloat4Data
	public struct GenericFieldFloat4 : IComponentData
	{
		public float number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldFloat5Data
	public struct GenericFieldFloat5 : IComponentData
	{
		public float number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldFloat6Data
	public struct GenericFieldFloat6 : IComponentData
	{
		public float number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldFloat7Data
	public struct GenericFieldFloat7 : IComponentData
	{
		public float number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldFloat8Data
	public struct GenericFieldFloat8 : IComponentData
	{
		public float number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldFloat9Data
	public struct GenericFieldFloat9 : IComponentData
	{
		public float number;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldVector0Data
	public struct GenericFieldVector0 : IComponentData
	{
		public float3 Value;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldVector1Data
	public struct GenericFieldVector1 : IComponentData
	{
		public float3 Value;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldVector2Data
	public struct GenericFieldVector2 : IComponentData
	{
		public float3 Value;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldVector3Data
	public struct GenericFieldVector3 : IComponentData
	{
		public float3 Value;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldString0Data
	public struct GenericFieldString0 : IComponentData
	{
		public FixedString64 name;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldString1Data
	public struct GenericFieldString1 : IComponentData
	{
		public FixedString64 name;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldString2Data
	public struct GenericFieldString2 : IComponentData
	{
		public FixedString64 name;
	}
	
	
	
	// EcsComponentData: InternalGenericFieldString4Data
	public struct GenericFieldString4 : IComponentData
	{
		public FixedString64 name;
	}
	
	

}


// ------------------ end of ComponentData.cs -----------------
#endregion



#region BufferElementData
// -----------------------------------
//  BufferElementData.cs
// -----------------------------------
			
namespace Coherence.Generated.FirstProject
{
	using Unity.Collections;
	using Unity.Entities;
	using Unity.Mathematics;
	using Unity.Transforms;

	
	// EcsComponentData: InternalGenericCommandData
	public struct GenericCommand : IBufferElementData
	{
		public FixedString64 name;
		public int paramInt1;
		public int paramInt2;
		public int paramInt3;
		public int paramInt4;
		public float paramFloat1;
		public float paramFloat2;
		public float paramFloat3;
		public float paramFloat4;
		public FixedString64 paramString;
	}

	public struct GenericCommandRequest : IBufferElementData
	{
		public FixedString64 name;
		public int paramInt1;
		public int paramInt2;
		public int paramInt3;
		public int paramInt4;
		public float paramFloat1;
		public float paramFloat2;
		public float paramFloat3;
		public float paramFloat4;
		public FixedString64 paramString;
	}

	


}


// ------------------ end of BufferElementData.cs -----------------
#endregion



#region SerializeCreateEntity
// -----------------------------------
//  SerializeCreateEntity.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
    using Message.Serializer.Serialize;
    using Coherence.Log;
    using Unity.Entities;
    using Unity.Transforms;
    using IOutBitStream = Coherence.Brook.IOutBitStream;
    using global::Coherence.Generated.FirstProject;
    using Coherence.Replication.Unity;

    public class SerializeCreateEntityRequest
    {
        private MessageSerializers messageSerializers;

        public SerializeCreateEntityRequest(UnityMapper mapper)
        {
            messageSerializers = new MessageSerializers(mapper);
        }
        
        public void SerializeComponentsInMessageFormat(EntityManager entityManager,
            Entity entity, uint[] foundComponentTypes, IOutBitStream bitStream, ILog log)
        {
            var protocolOutStream = new FieldStream.Serialize.Streams.OutBitStream(bitStream, log);

            foreach (var coherenceComponentType in foundComponentTypes)
            {
				ComponentTypeIdSerializer.Serialize(coherenceComponentType, bitStream);

				switch (coherenceComponentType)
                {
					
                    case TypeIds.InternalWorldPosition:
					{
						var data = entityManager.GetComponentData<Translation>(entity);
						messageSerializers.WorldPosition(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalWorldOrientation:
					{
						var data = entityManager.GetComponentData<Rotation>(entity);
						messageSerializers.WorldOrientation(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalLocalUser:
					{
						var data = entityManager.GetComponentData<LocalUser>(entity);
						messageSerializers.LocalUser(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalWorldPositionQuery:
					{
						var data = entityManager.GetComponentData<WorldPositionQuery>(entity);
						messageSerializers.WorldPositionQuery(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalSessionBased:
					{
						var data = entityManager.GetComponentData<SessionBased>(entity);
						messageSerializers.SessionBased(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericPrefabReference:
					{
						var data = entityManager.GetComponentData<GenericPrefabReference>(entity);
						messageSerializers.GenericPrefabReference(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericScale:
					{
						var data = entityManager.GetComponentData<GenericScale>(entity);
						messageSerializers.GenericScale(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldInt0:
					{
						var data = entityManager.GetComponentData<GenericFieldInt0>(entity);
						messageSerializers.GenericFieldInt0(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldInt1:
					{
						var data = entityManager.GetComponentData<GenericFieldInt1>(entity);
						messageSerializers.GenericFieldInt1(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldInt2:
					{
						var data = entityManager.GetComponentData<GenericFieldInt2>(entity);
						messageSerializers.GenericFieldInt2(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldInt3:
					{
						var data = entityManager.GetComponentData<GenericFieldInt3>(entity);
						messageSerializers.GenericFieldInt3(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldInt4:
					{
						var data = entityManager.GetComponentData<GenericFieldInt4>(entity);
						messageSerializers.GenericFieldInt4(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldInt5:
					{
						var data = entityManager.GetComponentData<GenericFieldInt5>(entity);
						messageSerializers.GenericFieldInt5(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldInt6:
					{
						var data = entityManager.GetComponentData<GenericFieldInt6>(entity);
						messageSerializers.GenericFieldInt6(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldInt7:
					{
						var data = entityManager.GetComponentData<GenericFieldInt7>(entity);
						messageSerializers.GenericFieldInt7(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldInt8:
					{
						var data = entityManager.GetComponentData<GenericFieldInt8>(entity);
						messageSerializers.GenericFieldInt8(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldInt9:
					{
						var data = entityManager.GetComponentData<GenericFieldInt9>(entity);
						messageSerializers.GenericFieldInt9(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldFloat0:
					{
						var data = entityManager.GetComponentData<GenericFieldFloat0>(entity);
						messageSerializers.GenericFieldFloat0(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldFloat1:
					{
						var data = entityManager.GetComponentData<GenericFieldFloat1>(entity);
						messageSerializers.GenericFieldFloat1(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldFloat2:
					{
						var data = entityManager.GetComponentData<GenericFieldFloat2>(entity);
						messageSerializers.GenericFieldFloat2(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldFloat3:
					{
						var data = entityManager.GetComponentData<GenericFieldFloat3>(entity);
						messageSerializers.GenericFieldFloat3(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldFloat4:
					{
						var data = entityManager.GetComponentData<GenericFieldFloat4>(entity);
						messageSerializers.GenericFieldFloat4(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldFloat5:
					{
						var data = entityManager.GetComponentData<GenericFieldFloat5>(entity);
						messageSerializers.GenericFieldFloat5(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldFloat6:
					{
						var data = entityManager.GetComponentData<GenericFieldFloat6>(entity);
						messageSerializers.GenericFieldFloat6(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldFloat7:
					{
						var data = entityManager.GetComponentData<GenericFieldFloat7>(entity);
						messageSerializers.GenericFieldFloat7(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldFloat8:
					{
						var data = entityManager.GetComponentData<GenericFieldFloat8>(entity);
						messageSerializers.GenericFieldFloat8(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldFloat9:
					{
						var data = entityManager.GetComponentData<GenericFieldFloat9>(entity);
						messageSerializers.GenericFieldFloat9(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldVector0:
					{
						var data = entityManager.GetComponentData<GenericFieldVector0>(entity);
						messageSerializers.GenericFieldVector0(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldVector1:
					{
						var data = entityManager.GetComponentData<GenericFieldVector1>(entity);
						messageSerializers.GenericFieldVector1(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldVector2:
					{
						var data = entityManager.GetComponentData<GenericFieldVector2>(entity);
						messageSerializers.GenericFieldVector2(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldVector3:
					{
						var data = entityManager.GetComponentData<GenericFieldVector3>(entity);
						messageSerializers.GenericFieldVector3(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldString0:
					{
						var data = entityManager.GetComponentData<GenericFieldString0>(entity);
						messageSerializers.GenericFieldString0(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldString1:
					{
						var data = entityManager.GetComponentData<GenericFieldString1>(entity);
						messageSerializers.GenericFieldString1(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldString2:
					{
						var data = entityManager.GetComponentData<GenericFieldString2>(entity);
						messageSerializers.GenericFieldString2(protocolOutStream, data);
						break;
					}
					
                    case TypeIds.InternalGenericFieldString4:
					{
						var data = entityManager.GetComponentData<GenericFieldString4>(entity);
						messageSerializers.GenericFieldString4(protocolOutStream, data);
						break;
					}
					

                    default:
                    {
                        log.Warning($"Unknown component", "component", coherenceComponentType);
                        break;
                    }
                }
            }
        }
    }
}

// ------------------ end of SerializeCreateEntity.cs -----------------
#endregion



#region DeserializeComponentUpdate
// -----------------------------------
//  DeserializeComponentUpdate.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
    using Coherence.Brook;
    using Coherence.Log;
	using Unity.Entities;
	using Unity.Transforms;
    using DeltaEcs;
    using global::Coherence.Generated.FirstProject;
    using Coherence.SimulationFrame;
    using Replication.Client.Unity.Ecs;
    using Coherence.Replication.Unity;

    public class DeserializeComponentUpdateGenerated
    {
        private UnityReaders unityReaders;

        public DeserializeComponentUpdateGenerated(UnityMapper mapper)
        {
            unityReaders = new UnityReaders(mapper);
        }


        private void DeserializeWorldPosition(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new Translation();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Ensure entities with interpolation also have Interpolation components and Sample components
			if (!entityManager.HasComponent<InterpolationComponent_Translation>(entity))
			{
				entityManager.AddComponent<InterpolationComponent_Translation>(entity);
				entityManager.AddComponent<Sample_Translation>(entity);
			}

			// Append buffer for components that use interpolation
			var tempComponentData = new Translation();
			unityReaders.Read(ref tempComponentData, protocolStream);
			if (justCreated) // Hack
			{
				entityManager.SetComponentData(entity, tempComponentData);
			}
			InterpolationSystem_Translation.AppendBuffer(entity, tempComponentData, entityManager.World, (ulong) simulationFrame.Frame);
    

		}

        private void DeserializeWorldOrientation(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new Rotation();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Ensure entities with interpolation also have Interpolation components and Sample components
			if (!entityManager.HasComponent<InterpolationComponent_Rotation>(entity))
			{
				entityManager.AddComponent<InterpolationComponent_Rotation>(entity);
				entityManager.AddComponent<Sample_Rotation>(entity);
			}

			// Append buffer for components that use interpolation
			var tempComponentData = new Rotation();
			unityReaders.Read(ref tempComponentData, protocolStream);
			if (justCreated) // Hack
			{
				entityManager.SetComponentData(entity, tempComponentData);
			}
			InterpolationSystem_Rotation.AppendBuffer(entity, tempComponentData, entityManager.World, (ulong) simulationFrame.Frame);
    

		}

        private void DeserializeLocalUser(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new LocalUser();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<LocalUser>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeWorldPositionQuery(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new WorldPositionQuery();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<WorldPositionQuery>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeSessionBased(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

			// No need to read empty components, just ensure that it's there
            if (!entityManager.HasComponent<SessionBased>(entity))
		    {
				entityManager.AddComponent<SessionBased>(entity);
			}

		}

        private void DeserializeGenericPrefabReference(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericPrefabReference();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericPrefabReference>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericScale(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericScale();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericScale>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldInt0(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldInt0();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldInt0>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldInt1(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldInt1();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldInt1>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldInt2(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldInt2();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldInt2>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldInt3(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldInt3();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldInt3>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldInt4(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldInt4();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldInt4>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldInt5(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldInt5();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldInt5>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldInt6(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldInt6();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldInt6>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldInt7(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldInt7();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldInt7>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldInt8(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldInt8();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldInt8>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldInt9(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldInt9();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldInt9>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldFloat0(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldFloat0();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldFloat0>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldFloat1(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldFloat1();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldFloat1>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldFloat2(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldFloat2();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldFloat2>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldFloat3(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldFloat3();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldFloat3>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldFloat4(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldFloat4();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldFloat4>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldFloat5(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldFloat5();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldFloat5>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldFloat6(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldFloat6();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldFloat6>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldFloat7(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldFloat7();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldFloat7>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldFloat8(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldFloat8();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldFloat8>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldFloat9(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldFloat9();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldFloat9>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldVector0(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldVector0();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldVector0>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldVector1(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldVector1();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldVector1>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldVector2(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldVector2();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldVector2>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldVector3(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldVector3();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldVector3>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldString0(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldString0();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldString0>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldString1(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldString1();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldString1>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldString2(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldString2();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldString2>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        private void DeserializeGenericFieldString4(EntityManager entityManager, Entity entity, bool componentOwnership, AbsoluteSimulationFrame simulationFrame, Coherence.Replication.Protocol.Definition.IInBitStream protocolStream, bool justCreated, IInBitStream bitStream)
        {

            // If we own the entity, don't overwrite with downstream data from server
            // TODO: Server should never send downstream to the simulating client
            if (componentOwnership)
	        {
	            // Read and discard data (the stream must always be read) 
	            var temp = new GenericFieldString4();
				unityReaders.Read(ref temp, protocolStream);
				return;
            }
            
    
			// Overwrite components that don't use interpolation
			var componentData = entityManager.GetComponentData<GenericFieldString4>(entity);
			unityReaders.Read(ref componentData, protocolStream);
			entityManager.SetComponentData(entity, componentData);
    

		}

        

        public void ReadComponentDataUpdate(EntityManager entityManager, Entity entity, uint componentType, AbsoluteSimulationFrame simulationFrame, IInBitStream bitStream, ILog log)
        {
            ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, false, log);
		}

        public void ReadComponentDataUpdateEx(EntityManager entityManager, Entity entity, uint componentType, AbsoluteSimulationFrame simulationFrame, IInBitStream bitStream, bool justCreated, ILog log)
        {
            var componentOwnership = Deserializator.ReadComponentOwnership(bitStream, log); // Read bit from stream...
            componentOwnership = entityManager.HasComponent<Simulated>(entity); // Then overwrite it with entity ownership.
            var inProtocolStream = new Coherence.FieldStream.Deserialize.Streams.InBitStream(bitStream, log);
            switch (componentType)
            {
				
			case TypeIds.InternalWorldPosition:
				DeserializeWorldPosition(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalWorldOrientation:
				DeserializeWorldOrientation(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalLocalUser:
				DeserializeLocalUser(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalWorldPositionQuery:
				DeserializeWorldPositionQuery(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalSessionBased:
				DeserializeSessionBased(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericPrefabReference:
				DeserializeGenericPrefabReference(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericScale:
				DeserializeGenericScale(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldInt0:
				DeserializeGenericFieldInt0(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldInt1:
				DeserializeGenericFieldInt1(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldInt2:
				DeserializeGenericFieldInt2(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldInt3:
				DeserializeGenericFieldInt3(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldInt4:
				DeserializeGenericFieldInt4(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldInt5:
				DeserializeGenericFieldInt5(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldInt6:
				DeserializeGenericFieldInt6(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldInt7:
				DeserializeGenericFieldInt7(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldInt8:
				DeserializeGenericFieldInt8(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldInt9:
				DeserializeGenericFieldInt9(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldFloat0:
				DeserializeGenericFieldFloat0(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldFloat1:
				DeserializeGenericFieldFloat1(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldFloat2:
				DeserializeGenericFieldFloat2(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldFloat3:
				DeserializeGenericFieldFloat3(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldFloat4:
				DeserializeGenericFieldFloat4(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldFloat5:
				DeserializeGenericFieldFloat5(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldFloat6:
				DeserializeGenericFieldFloat6(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldFloat7:
				DeserializeGenericFieldFloat7(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldFloat8:
				DeserializeGenericFieldFloat8(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldFloat9:
				DeserializeGenericFieldFloat9(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldVector0:
				DeserializeGenericFieldVector0(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldVector1:
				DeserializeGenericFieldVector1(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldVector2:
				DeserializeGenericFieldVector2(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldVector3:
				DeserializeGenericFieldVector3(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldString0:
				DeserializeGenericFieldString0(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldString1:
				DeserializeGenericFieldString1(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldString2:
				DeserializeGenericFieldString2(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				
			case TypeIds.InternalGenericFieldString4:
				DeserializeGenericFieldString4(entityManager, entity, componentOwnership, simulationFrame, inProtocolStream, justCreated, bitStream);
				break;
				

			default:
				log.Warning("couldn't find component", "componentType", componentType);
				break;
			}
		}
		
        public void CreateIfNeededAndReadComponentDataUpdate(EntityManager entityManager, Entity entity, uint componentType, AbsoluteSimulationFrame simulationFrame, IInBitStream bitStream, ILog log)
        {
#region Commands

            {
                var hasBuffer = entityManager.HasComponent<GenericCommand>(entity);
                if (!hasBuffer)
                {
                    entityManager.AddBuffer<GenericCommand>(entity);
                }
    
                var hasRequestBuffer = entityManager.HasComponent<GenericCommandRequest>(entity);
                if (!hasRequestBuffer)
                {
                    entityManager.AddBuffer<GenericCommandRequest>(entity);
                }
            }

#endregion

            switch (componentType)
            {

				case TypeIds.InternalWorldPosition:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<Translation>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<WorldPosition_Sync>(entity) && entityManager.GetComponentData<WorldPosition_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new Translation());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalWorldOrientation:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<Rotation>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<WorldOrientation_Sync>(entity) && entityManager.GetComponentData<WorldOrientation_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new Rotation());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalLocalUser:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<LocalUser>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<LocalUser_Sync>(entity) && entityManager.GetComponentData<LocalUser_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new LocalUser());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalWorldPositionQuery:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<WorldPositionQuery>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<WorldPositionQuery_Sync>(entity) && entityManager.GetComponentData<WorldPositionQuery_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new WorldPositionQuery());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalSessionBased:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<SessionBased>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<SessionBased_Sync>(entity) && entityManager.GetComponentData<SessionBased_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new SessionBased());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericPrefabReference:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericPrefabReference>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericPrefabReference_Sync>(entity) && entityManager.GetComponentData<GenericPrefabReference_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericPrefabReference());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericScale:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericScale>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericScale_Sync>(entity) && entityManager.GetComponentData<GenericScale_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericScale());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldInt0:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldInt0>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldInt0_Sync>(entity) && entityManager.GetComponentData<GenericFieldInt0_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldInt0());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldInt1:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldInt1>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldInt1_Sync>(entity) && entityManager.GetComponentData<GenericFieldInt1_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldInt1());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldInt2:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldInt2>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldInt2_Sync>(entity) && entityManager.GetComponentData<GenericFieldInt2_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldInt2());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldInt3:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldInt3>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldInt3_Sync>(entity) && entityManager.GetComponentData<GenericFieldInt3_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldInt3());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldInt4:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldInt4>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldInt4_Sync>(entity) && entityManager.GetComponentData<GenericFieldInt4_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldInt4());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldInt5:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldInt5>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldInt5_Sync>(entity) && entityManager.GetComponentData<GenericFieldInt5_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldInt5());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldInt6:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldInt6>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldInt6_Sync>(entity) && entityManager.GetComponentData<GenericFieldInt6_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldInt6());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldInt7:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldInt7>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldInt7_Sync>(entity) && entityManager.GetComponentData<GenericFieldInt7_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldInt7());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldInt8:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldInt8>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldInt8_Sync>(entity) && entityManager.GetComponentData<GenericFieldInt8_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldInt8());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldInt9:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldInt9>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldInt9_Sync>(entity) && entityManager.GetComponentData<GenericFieldInt9_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldInt9());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldFloat0:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldFloat0>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldFloat0_Sync>(entity) && entityManager.GetComponentData<GenericFieldFloat0_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldFloat0());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldFloat1:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldFloat1>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldFloat1_Sync>(entity) && entityManager.GetComponentData<GenericFieldFloat1_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldFloat1());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldFloat2:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldFloat2>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldFloat2_Sync>(entity) && entityManager.GetComponentData<GenericFieldFloat2_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldFloat2());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldFloat3:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldFloat3>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldFloat3_Sync>(entity) && entityManager.GetComponentData<GenericFieldFloat3_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldFloat3());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldFloat4:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldFloat4>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldFloat4_Sync>(entity) && entityManager.GetComponentData<GenericFieldFloat4_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldFloat4());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldFloat5:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldFloat5>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldFloat5_Sync>(entity) && entityManager.GetComponentData<GenericFieldFloat5_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldFloat5());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldFloat6:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldFloat6>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldFloat6_Sync>(entity) && entityManager.GetComponentData<GenericFieldFloat6_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldFloat6());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldFloat7:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldFloat7>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldFloat7_Sync>(entity) && entityManager.GetComponentData<GenericFieldFloat7_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldFloat7());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldFloat8:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldFloat8>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldFloat8_Sync>(entity) && entityManager.GetComponentData<GenericFieldFloat8_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldFloat8());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldFloat9:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldFloat9>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldFloat9_Sync>(entity) && entityManager.GetComponentData<GenericFieldFloat9_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldFloat9());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldVector0:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldVector0>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldVector0_Sync>(entity) && entityManager.GetComponentData<GenericFieldVector0_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldVector0());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldVector1:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldVector1>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldVector1_Sync>(entity) && entityManager.GetComponentData<GenericFieldVector1_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldVector1());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldVector2:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldVector2>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldVector2_Sync>(entity) && entityManager.GetComponentData<GenericFieldVector2_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldVector2());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldVector3:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldVector3>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldVector3_Sync>(entity) && entityManager.GetComponentData<GenericFieldVector3_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldVector3());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldString0:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldString0>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldString0_Sync>(entity) && entityManager.GetComponentData<GenericFieldString0_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldString0());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldString1:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldString1>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldString1_Sync>(entity) && entityManager.GetComponentData<GenericFieldString1_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldString1());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldString2:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldString2>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldString2_Sync>(entity) && entityManager.GetComponentData<GenericFieldString2_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldString2());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

				case TypeIds.InternalGenericFieldString4:
                {
                    var justCreated = false;
                    var hasComponentData = entityManager.HasComponent<GenericFieldString4>(entity);
                    var componentHasBeenRemoved = entityManager.HasComponent<GenericFieldString4_Sync>(entity) && entityManager.GetComponentData<GenericFieldString4_Sync>(entity).deletedAtTime > 0;
                    if (!hasComponentData && !componentHasBeenRemoved)
                    {
                        entityManager.AddComponentData(entity, new GenericFieldString4());
                        justCreated = true;
                    }

                    ReadComponentDataUpdateEx(entityManager, entity, componentType, simulationFrame, bitStream, justCreated, log);
                    break;
				}

                default:
				{
                    log.Warning("can not create component type");
                    break;
				}
            }
        }		
    }

    public class ComponentDeserializeWrapper : ISchemaSpecificComponentDeserialize
    {
        private DeserializeComponentUpdateGenerated deserializeComponentUpdateGenerated;

        public ComponentDeserializeWrapper(UnityMapper mapper)
        {
            deserializeComponentUpdateGenerated = new DeserializeComponentUpdateGenerated(mapper);
        }

        public void CreateIfNeededAndReadComponentDataUpdate(EntityManager entityManager, Entity entity, uint componentType, AbsoluteSimulationFrame simulationFrame, IInBitStream bitStream, ILog log)
        {
            deserializeComponentUpdateGenerated.CreateIfNeededAndReadComponentDataUpdate(entityManager, entity, componentType, simulationFrame, bitStream, log);
        }

        public void ReadComponentDataUpdate(EntityManager entityManager, Entity entity, uint componentType, AbsoluteSimulationFrame simulationFrame, IInBitStream bitStream, ILog log)
        {
            deserializeComponentUpdateGenerated.ReadComponentDataUpdate(entityManager, entity, componentType, simulationFrame, bitStream, log);
        }
    }

}

// ------------------ end of DeserializeComponentUpdate.cs -----------------
#endregion



#region DeserializeAndSkipComponentUpdate
// -----------------------------------
//  DeserializeAndSkipComponentUpdate.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
    using Coherence.Log;
    using Unity.Transforms;
    using global::Coherence.Generated.FirstProject;
    using Replication.Client.Unity.Ecs;
    using Coherence.Replication.Unity;

    public class DeserializeComponentUpdateSkipGenerated
    {
        private UnityReaders unityReaders;

        public DeserializeComponentUpdateSkipGenerated(UnityMapper mapper)
        {
            unityReaders = new UnityReaders(mapper);
        }

		
		private void DeserializeWorldPosition(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new Translation();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeWorldOrientation(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new Rotation();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeLocalUser(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new LocalUser();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeWorldPositionQuery(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new WorldPositionQuery();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeSessionBased(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new SessionBased();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericPrefabReference(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericPrefabReference();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericScale(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericScale();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldInt0(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldInt0();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldInt1(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldInt1();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldInt2(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldInt2();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldInt3(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldInt3();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldInt4(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldInt4();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldInt5(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldInt5();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldInt6(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldInt6();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldInt7(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldInt7();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldInt8(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldInt8();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldInt9(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldInt9();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldFloat0(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldFloat0();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldFloat1(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldFloat1();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldFloat2(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldFloat2();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldFloat3(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldFloat3();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldFloat4(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldFloat4();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldFloat5(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldFloat5();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldFloat6(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldFloat6();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldFloat7(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldFloat7();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldFloat8(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldFloat8();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldFloat9(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldFloat9();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldVector0(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldVector0();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldVector1(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldVector1();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldVector2(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldVector2();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldVector3(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldVector3();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldString0(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldString0();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldString1(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldString1();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldString2(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldString2();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
		private void DeserializeGenericFieldString4(Coherence.Replication.Protocol.Definition.IInBitStream protocolStream)
		{
            var ignored = new GenericFieldString4();
            unityReaders.Read(ref ignored, protocolStream);
		}
		
 
		public void SkipComponentDataUpdate(uint componentType, Coherence.Replication.Protocol.Definition.IInBitStream inProtocolStream, ILog log)
        {
			switch (componentType)
            {

                case TypeIds.InternalWorldPosition:
					DeserializeWorldPosition(inProtocolStream);
                    break;

                case TypeIds.InternalWorldOrientation:
					DeserializeWorldOrientation(inProtocolStream);
                    break;

                case TypeIds.InternalLocalUser:
					DeserializeLocalUser(inProtocolStream);
                    break;

                case TypeIds.InternalWorldPositionQuery:
					DeserializeWorldPositionQuery(inProtocolStream);
                    break;

                case TypeIds.InternalSessionBased:
					DeserializeSessionBased(inProtocolStream);
                    break;

                case TypeIds.InternalGenericPrefabReference:
					DeserializeGenericPrefabReference(inProtocolStream);
                    break;

                case TypeIds.InternalGenericScale:
					DeserializeGenericScale(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldInt0:
					DeserializeGenericFieldInt0(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldInt1:
					DeserializeGenericFieldInt1(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldInt2:
					DeserializeGenericFieldInt2(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldInt3:
					DeserializeGenericFieldInt3(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldInt4:
					DeserializeGenericFieldInt4(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldInt5:
					DeserializeGenericFieldInt5(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldInt6:
					DeserializeGenericFieldInt6(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldInt7:
					DeserializeGenericFieldInt7(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldInt8:
					DeserializeGenericFieldInt8(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldInt9:
					DeserializeGenericFieldInt9(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldFloat0:
					DeserializeGenericFieldFloat0(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldFloat1:
					DeserializeGenericFieldFloat1(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldFloat2:
					DeserializeGenericFieldFloat2(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldFloat3:
					DeserializeGenericFieldFloat3(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldFloat4:
					DeserializeGenericFieldFloat4(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldFloat5:
					DeserializeGenericFieldFloat5(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldFloat6:
					DeserializeGenericFieldFloat6(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldFloat7:
					DeserializeGenericFieldFloat7(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldFloat8:
					DeserializeGenericFieldFloat8(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldFloat9:
					DeserializeGenericFieldFloat9(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldVector0:
					DeserializeGenericFieldVector0(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldVector1:
					DeserializeGenericFieldVector1(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldVector2:
					DeserializeGenericFieldVector2(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldVector3:
					DeserializeGenericFieldVector3(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldString0:
					DeserializeGenericFieldString0(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldString1:
					DeserializeGenericFieldString1(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldString2:
					DeserializeGenericFieldString2(inProtocolStream);
                    break;

                case TypeIds.InternalGenericFieldString4:
					DeserializeGenericFieldString4(inProtocolStream);
                    break;

			}
		}
    }
    
    public class DeserializeComponentsAndSkipWrapper : ISchemaSpecificComponentDeserializerAndSkip
    {
        DeserializeComponentUpdateSkipGenerated deserializeComponentUpdateSkipGenerated;

        public DeserializeComponentsAndSkipWrapper(UnityMapper mapper)
        {
            deserializeComponentUpdateSkipGenerated = new DeserializeComponentUpdateSkipGenerated(mapper);
        }

        public void DeserializeAndSkipComponent(uint componentTypeId, Coherence.Replication.Protocol.Definition.IInBitStream protocolOutStream, ILog log)
        {
            deserializeComponentUpdateSkipGenerated.SkipComponentDataUpdate(componentTypeId, protocolOutStream, log);
        }
    }    
}

// ------------------ end of DeserializeAndSkipComponentUpdate.cs -----------------
#endregion



#region SyncReceiveSystem
// -----------------------------------
//  SyncReceiveSystem.cs
// -----------------------------------
			

namespace Coherence.Generated.Internal.Schema
{
    using Coherence.SimulationFrame;
    using Protocol.Deserialize;
    using Unity.Entities;
	using Replication.Client.Unity.Ecs;
	using Coherence.Sdk.Unity;

    // ReSharper disable once ClassNeverInstantiated.Global
    [UpdateInGroup(typeof(InitializationSystemGroup))]
    [AlwaysUpdateSystem]
    public class SyncReceiveSystem : SystemBase
    {
        private Receiver receiver;
        CoherenceSimulationSystemGroup simGroup;
        private bool hasInitialTime;
        private bool isBooted;

        private void BootUp()
        {
	        simGroup = World.GetExistingSystem<CoherenceSimulationSystemGroup>();
            var netSys = World.GetOrCreateSystem<NetworkSystem>();
            var deserializeComponents = new ComponentDeserializeWrapper(netSys.Mapper);
            var skipper = new DeserializeComponentsAndSkipWrapper(netSys.Mapper);
            var commandPerform = new PerformCommands(netSys.Mapper);
            var eventPerform = new PerformEvents(netSys.Mapper);
            var receiveUpdate = new ReceiveUpdate(deserializeComponents, skipper, netSys.Mapper, netSys.DestroyedEntities, netSys.Log);
            receiver = new Receiver(World, netSys.Mapper, netSys.Connector, receiveUpdate, commandPerform, eventPerform, netSys.SentPacketsCache, netSys.Log);
        }

        private void ChangeClockSpeed(ClockSpeedFactor factor)
        {
            const float desiredTimestep = 1f / 60f;
            const int maxSubsteps = 10;
            var timeStep = 0f;
            if (factor.FactorTimesThousand <= 1)
            {
            }
            else
            {
	            timeStep = desiredTimestep * 1000f / factor.FactorTimesThousand;
            }

            simGroup.SetTimeStep(true, timeStep, maxSubsteps);
        }

        protected override void OnUpdate()
        {
	        if (!isBooted)
	        {
		        isBooted = true;
		        BootUp();
	        }

            // Respond to network disconnect events
	        Entities.ForEach((in DisconnectedEvent connected) =>
	        {
		        // Destroy all networked entities 
		        World.GetOrCreateSystem<NetworkSystem>().Mapper.ClearAndDestroyEntities();
		        
		        // Clear the incoming packet repository
		        receiver.ResetPacketRepository();
	        }).WithStructuralChanges().WithoutBurst().Run();

            var simulationFrame = new AbsoluteSimulationFrame { Frame = (long)simGroup.SimulationFrame };
            var adjust = receiver.OnUpdate(simulationFrame);

            if (adjust.State != SpecialCommandState.Ignore)
	        {
	            var needsToOverwriteTime = (!hasInitialTime && adjust.SimulationFrame.Frame != 0) || adjust.State == SpecialCommandState.Reset;

	            if (needsToOverwriteTime)
	            {
	                simGroup.SetSimulationFrame((ulong)adjust.SimulationFrame.Frame);
	                hasInitialTime = true;
	            }

	            ChangeClockSpeed(adjust.ClockSpeed);
            }
        }
    }
}

// ------------------ end of SyncReceiveSystem.cs -----------------
#endregion



#region SyncComponent
// -----------------------------------
//  SyncComponent.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
    using Unity.Entities;
    using Unity.Transforms;
    using global::Coherence.Generated.FirstProject;


    public struct WorldPosition_Sync : IComponentData
    {
        public Translation lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct WorldOrientation_Sync : IComponentData
    {
        public Rotation lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct LocalUser_Sync : IComponentData
    {
        public LocalUser lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct WorldPositionQuery_Sync : IComponentData
    {
        public WorldPositionQuery lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct SessionBased_Sync : IComponentData
    {
        public SessionBased lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericPrefabReference_Sync : IComponentData
    {
        public GenericPrefabReference lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericScale_Sync : IComponentData
    {
        public GenericScale lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldInt0_Sync : IComponentData
    {
        public GenericFieldInt0 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldInt1_Sync : IComponentData
    {
        public GenericFieldInt1 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldInt2_Sync : IComponentData
    {
        public GenericFieldInt2 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldInt3_Sync : IComponentData
    {
        public GenericFieldInt3 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldInt4_Sync : IComponentData
    {
        public GenericFieldInt4 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldInt5_Sync : IComponentData
    {
        public GenericFieldInt5 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldInt6_Sync : IComponentData
    {
        public GenericFieldInt6 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldInt7_Sync : IComponentData
    {
        public GenericFieldInt7 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldInt8_Sync : IComponentData
    {
        public GenericFieldInt8 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldInt9_Sync : IComponentData
    {
        public GenericFieldInt9 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldFloat0_Sync : IComponentData
    {
        public GenericFieldFloat0 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldFloat1_Sync : IComponentData
    {
        public GenericFieldFloat1 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldFloat2_Sync : IComponentData
    {
        public GenericFieldFloat2 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldFloat3_Sync : IComponentData
    {
        public GenericFieldFloat3 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldFloat4_Sync : IComponentData
    {
        public GenericFieldFloat4 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldFloat5_Sync : IComponentData
    {
        public GenericFieldFloat5 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldFloat6_Sync : IComponentData
    {
        public GenericFieldFloat6 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldFloat7_Sync : IComponentData
    {
        public GenericFieldFloat7 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldFloat8_Sync : IComponentData
    {
        public GenericFieldFloat8 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldFloat9_Sync : IComponentData
    {
        public GenericFieldFloat9 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldVector0_Sync : IComponentData
    {
        public GenericFieldVector0 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldVector1_Sync : IComponentData
    {
        public GenericFieldVector1 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldVector2_Sync : IComponentData
    {
        public GenericFieldVector2 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldVector3_Sync : IComponentData
    {
        public GenericFieldVector3 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldString0_Sync : IComponentData
    {
        public GenericFieldString0 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldString1_Sync : IComponentData
    {
        public GenericFieldString1 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldString2_Sync : IComponentData
    {
        public GenericFieldString2 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


    public struct GenericFieldString4_Sync : IComponentData
    {
        public GenericFieldString4 lastSentData;
        public uint resendMask;
        public uint howImportantAreYou;
        public uint accumulatedPriority;
        public long deletedAtTime;
        public bool hasBeenSerialized;
        public bool deleteHasBeenSerialized;
        public bool hasReceivedConstructor;
    }


}


// ------------------ end of SyncComponent.cs -----------------
#endregion



#region SerializeComponentUpdate
// -----------------------------------
//  SerializeComponentUpdate.cs
// -----------------------------------
			

namespace Coherence.Generated.Internal.Schema
{
	using System;
	using Unity.Entities;
	using Unity.Transforms;
	using global::Coherence.Generated.FirstProject;
	using Coherence.Replication.Protocol.Definition;
	using Replication.Client.Unity.Ecs;
    using Coherence.Replication.Unity;

    public class SerializeComponentUpdatesGenerated
    {
         private UnityWriters unityWriters;

         public SerializeComponentUpdatesGenerated(UnityMapper mapper)
         {
             unityWriters = new UnityWriters(mapper);
         }


        private void SerializeWorldPosition(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<Translation>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<WorldPosition_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeWorldOrientation(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<Rotation>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<WorldOrientation_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeLocalUser(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<LocalUser>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<LocalUser_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeWorldPositionQuery(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<WorldPositionQuery>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<WorldPositionQuery_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeSessionBased(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<SessionBased_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericPrefabReference(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericPrefabReference>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericPrefabReference_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericScale(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericScale>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericScale_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldInt0(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldInt0>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldInt0_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldInt1(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldInt1>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldInt1_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldInt2(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldInt2>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldInt2_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldInt3(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldInt3>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldInt3_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldInt4(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldInt4>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldInt4_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldInt5(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldInt5>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldInt5_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldInt6(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldInt6>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldInt6_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldInt7(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldInt7>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldInt7_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldInt8(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldInt8>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldInt8_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldInt9(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldInt9>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldInt9_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldFloat0(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldFloat0>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldFloat0_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldFloat1(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldFloat1>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldFloat1_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldFloat2(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldFloat2>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldFloat2_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldFloat3(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldFloat3>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldFloat3_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldFloat4(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldFloat4>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldFloat4_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldFloat5(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldFloat5>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldFloat5_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldFloat6(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldFloat6>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldFloat6_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldFloat7(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldFloat7>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldFloat7_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldFloat8(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldFloat8>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldFloat8_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldFloat9(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldFloat9>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldFloat9_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldVector0(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldVector0>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldVector0_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldVector1(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldVector1>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldVector1_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldVector2(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldVector2>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldVector2_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldVector3(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldVector3>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldVector3_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldString0(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldString0>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldString0_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldString1(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldString1>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldString1_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldString2(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldString2>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldString2_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

        private void SerializeGenericFieldString4(EntityManager EntityManager, Entity entity, uint mask, IOutBitStream protocolOutStream)
        {

            // Write component changes to output stream
            var componentData = EntityManager.GetComponentData<GenericFieldString4>(entity);
            unityWriters.Write(componentData, mask, protocolOutStream);

            // Reset accumulated priority so the same component is not sent again next frame
            var syncData = EntityManager.GetComponentData<GenericFieldString4_Sync>(entity);

            syncData.accumulatedPriority = 0;

            syncData.lastSentData = componentData;

            syncData.hasBeenSerialized = true;
            syncData.resendMask &= ~mask;	// Clear serialized fields from resend mask
            EntityManager.SetComponentData(entity, syncData);
        }
        

    
        public void SerializeComponent(EntityManager entityManager, Entity unityEntity, uint componentType, uint fieldMask, IOutBitStream protocolOutStream)
        {
            switch (componentType)
            {

                case TypeIds.InternalWorldPosition:
                    SerializeWorldPosition(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalWorldOrientation:
                    SerializeWorldOrientation(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalLocalUser:
                    SerializeLocalUser(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalWorldPositionQuery:
                    SerializeWorldPositionQuery(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalSessionBased:
                    SerializeSessionBased(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericPrefabReference:
                    SerializeGenericPrefabReference(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericScale:
                    SerializeGenericScale(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldInt0:
                    SerializeGenericFieldInt0(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldInt1:
                    SerializeGenericFieldInt1(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldInt2:
                    SerializeGenericFieldInt2(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldInt3:
                    SerializeGenericFieldInt3(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldInt4:
                    SerializeGenericFieldInt4(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldInt5:
                    SerializeGenericFieldInt5(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldInt6:
                    SerializeGenericFieldInt6(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldInt7:
                    SerializeGenericFieldInt7(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldInt8:
                    SerializeGenericFieldInt8(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldInt9:
                    SerializeGenericFieldInt9(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldFloat0:
                    SerializeGenericFieldFloat0(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldFloat1:
                    SerializeGenericFieldFloat1(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldFloat2:
                    SerializeGenericFieldFloat2(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldFloat3:
                    SerializeGenericFieldFloat3(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldFloat4:
                    SerializeGenericFieldFloat4(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldFloat5:
                    SerializeGenericFieldFloat5(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldFloat6:
                    SerializeGenericFieldFloat6(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldFloat7:
                    SerializeGenericFieldFloat7(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldFloat8:
                    SerializeGenericFieldFloat8(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldFloat9:
                    SerializeGenericFieldFloat9(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldVector0:
                    SerializeGenericFieldVector0(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldVector1:
                    SerializeGenericFieldVector1(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldVector2:
                    SerializeGenericFieldVector2(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldVector3:
                    SerializeGenericFieldVector3(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldString0:
                    SerializeGenericFieldString0(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldString1:
                    SerializeGenericFieldString1(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldString2:
                    SerializeGenericFieldString2(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                case TypeIds.InternalGenericFieldString4:
                    SerializeGenericFieldString4(entityManager, unityEntity, fieldMask, protocolOutStream);
                    break;

                default:
                    throw new Exception($"unknown componentType {componentType}");
            }
        }
    
        
        public void UpdateDestructState(EntityManager entityManager, Entity unityEntity, uint componentTypeId)
        {
            switch (componentTypeId)
            {

                case TypeIds.InternalWorldPosition:
                {
                    var syncData = entityManager.GetComponentData<WorldPosition_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalWorldOrientation:
                {
                    var syncData = entityManager.GetComponentData<WorldOrientation_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalLocalUser:
                {
                    var syncData = entityManager.GetComponentData<LocalUser_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalWorldPositionQuery:
                {
                    var syncData = entityManager.GetComponentData<WorldPositionQuery_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalSessionBased:
                {
                    var syncData = entityManager.GetComponentData<SessionBased_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericPrefabReference:
                {
                    var syncData = entityManager.GetComponentData<GenericPrefabReference_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericScale:
                {
                    var syncData = entityManager.GetComponentData<GenericScale_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldInt0:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldInt0_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldInt1:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldInt1_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldInt2:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldInt2_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldInt3:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldInt3_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldInt4:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldInt4_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldInt5:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldInt5_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldInt6:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldInt6_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldInt7:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldInt7_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldInt8:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldInt8_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldInt9:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldInt9_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldFloat0:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldFloat0_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldFloat1:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldFloat1_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldFloat2:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldFloat2_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldFloat3:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldFloat3_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldFloat4:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldFloat4_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldFloat5:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldFloat5_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldFloat6:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldFloat6_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldFloat7:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldFloat7_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldFloat8:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldFloat8_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldFloat9:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldFloat9_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldVector0:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldVector0_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldVector1:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldVector1_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldVector2:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldVector2_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldVector3:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldVector3_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldString0:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldString0_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldString1:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldString1_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldString2:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldString2_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }

                case TypeIds.InternalGenericFieldString4:
                {
                    var syncData = entityManager.GetComponentData<GenericFieldString4_Sync>(unityEntity);
                    syncData.deleteHasBeenSerialized = true;
                    entityManager.SetComponentData(unityEntity, syncData);
                    break;
                }


                default:
                    throw new Exception($"unknown componentType {componentTypeId}");
            }
        }
    }
    
    class SerializeComponentUpdatesWrapper : ISchemaSpecificComponentSerializer
    {
        private SerializeComponentUpdatesGenerated serializeComponentUpdatesGenerated;

        public SerializeComponentUpdatesWrapper(UnityMapper mapper)
        {
            serializeComponentUpdatesGenerated = new SerializeComponentUpdatesGenerated(mapper);
        }

    	public void SerializeComponent(EntityManager entityManager, Entity unityEntity, uint ComponentTypeId, uint fieldMask, IOutBitStream protocolOutStream)
    	{
    		serializeComponentUpdatesGenerated.SerializeComponent(entityManager, unityEntity, ComponentTypeId, fieldMask, protocolOutStream);
    	}
    	
    	public void UpdateDestructState(EntityManager entityManager, Entity unityEntity, uint componentTypeId)
    	{
            serializeComponentUpdatesGenerated.UpdateDestructState(entityManager, unityEntity, componentTypeId);
        }
    }

}


// ------------------ end of SerializeComponentUpdate.cs -----------------
#endregion



#region ComponentMaskDeserializers
// -----------------------------------
//  ComponentMaskDeserializers.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
	using Unity.Transforms;
	using Coherence.Replication.Unity;
	using Coherence.Replication.Protocol.Definition;
	using global::Coherence.Generated.FirstProject;


public class UnityReaders
{
    private CoherenceToUnityConverters coherenceToUnityConverters;

    public UnityReaders(UnityMapper mapper)
    {
        coherenceToUnityConverters = new CoherenceToUnityConverters(mapper);
    }
	
	public uint Read(ref Translation data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadVector3f(24, 2400);
			     data.Value = coherenceToUnityConverters.ToUnityfloat3(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref Rotation data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadUnitRotation();
			     data.Value = coherenceToUnityConverters.ToUnityquaternion(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref LocalUser data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.localIndex = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref WorldPositionQuery data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadVector3f(24, 2400);
			     data.position = coherenceToUnityConverters.ToUnityfloat3(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}

		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.radius = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000010;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref SessionBased data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;

       
		return propertyMask;
	}

	
	public uint Read(ref GenericPrefabReference data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadShortString();
			     data.prefab = coherenceToUnityConverters.ToUnityFixedString64(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericScale data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadVector3f(24, 2400);
			     data.Value = coherenceToUnityConverters.ToUnityfloat3(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldInt0 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.number = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldInt1 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.number = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldInt2 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.number = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldInt3 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.number = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldInt4 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.number = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldInt5 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.number = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldInt6 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.number = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldInt7 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.number = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldInt8 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.number = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldInt9 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadIntegerRange(15, -9999);
			       data.number = coherenceField;
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldFloat0 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.number = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldFloat1 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.number = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldFloat2 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.number = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldFloat3 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.number = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldFloat4 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.number = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldFloat5 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.number = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldFloat6 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.number = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldFloat7 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.number = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldFloat8 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.number = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldFloat9 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadFixedPoint(24, 40000);
			     data.number = coherenceToUnityConverters.ToUnityfloat(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldVector0 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadVector3f(24, 2400);
			     data.Value = coherenceToUnityConverters.ToUnityfloat3(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldVector1 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadVector3f(24, 2400);
			     data.Value = coherenceToUnityConverters.ToUnityfloat3(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldVector2 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadVector3f(24, 2400);
			     data.Value = coherenceToUnityConverters.ToUnityfloat3(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldVector3 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadVector3f(24, 2400);
			     data.Value = coherenceToUnityConverters.ToUnityfloat3(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldString0 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadShortString();
			     data.name = coherenceToUnityConverters.ToUnityFixedString64(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldString1 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadShortString();
			     data.name = coherenceToUnityConverters.ToUnityFixedString64(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldString2 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadShortString();
			     data.name = coherenceToUnityConverters.ToUnityFixedString64(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
	public uint Read(ref GenericFieldString4 data, IInBitStream bitstream)
	{
		var propertyMask = (uint)0;


		if (bitstream.ReadMask()) 
		{
			var coherenceField = bitstream.ReadShortString();
			     data.name = coherenceToUnityConverters.ToUnityFixedString64(coherenceField);
			propertyMask |= 0b00000000000000000000000000000001;
		}
       
		return propertyMask;
	}

	
}

}

// ------------------ end of ComponentMaskDeserializers.cs -----------------
#endregion



#region ComponentMaskSerializers
// -----------------------------------
//  ComponentMaskSerializers.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
	using global::Coherence.Generated.FirstProject;
	using Replication.Unity;
	using Unity.Transforms;


	public class UnityWriters
	{
        private CoherenceToUnityConverters coherenceToUnityConverters;

        public UnityWriters(UnityMapper mapper)
        {
            coherenceToUnityConverters = new CoherenceToUnityConverters(mapper);
        }

		
		
		public void Write(in Translation data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat3(data.Value);
					bitstream.WriteVector3f(v, 24, 2400);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in Rotation data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityquaternion(data.Value);
					bitstream.WriteUnitRotation(v);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in LocalUser data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.localIndex, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in WorldPositionQuery data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat3(data.position);
					bitstream.WriteVector3f(v, 24, 2400);
				
			}
			propertyMask >>= 1;
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.radius);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in SessionBased data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
	     }

		
		
		public void Write(in GenericPrefabReference data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityFixedString64(data.prefab);
					bitstream.WriteShortString(v);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericScale data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat3(data.Value);
					bitstream.WriteVector3f(v, 24, 2400);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldInt0 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.number, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldInt1 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.number, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldInt2 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.number, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldInt3 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.number, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldInt4 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.number, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldInt5 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.number, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldInt6 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.number, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldInt7 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.number, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldInt8 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.number, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldInt9 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					bitstream.WriteIntegerRange(data.number, 15, -9999);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldFloat0 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.number);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldFloat1 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.number);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldFloat2 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.number);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldFloat3 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.number);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldFloat4 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.number);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldFloat5 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.number);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldFloat6 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.number);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldFloat7 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.number);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldFloat8 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.number);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldFloat9 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat(data.number);
					bitstream.WriteFixedPoint(v, 24, 40000);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldVector0 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat3(data.Value);
					bitstream.WriteVector3f(v, 24, 2400);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldVector1 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat3(data.Value);
					bitstream.WriteVector3f(v, 24, 2400);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldVector2 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat3(data.Value);
					bitstream.WriteVector3f(v, 24, 2400);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldVector3 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityfloat3(data.Value);
					bitstream.WriteVector3f(v, 24, 2400);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldString0 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityFixedString64(data.name);
					bitstream.WriteShortString(v);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldString1 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityFixedString64(data.name);
					bitstream.WriteShortString(v);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldString2 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityFixedString64(data.name);
					bitstream.WriteShortString(v);
				
			}
			propertyMask >>= 1;
	
	     }

		
		
		public void Write(in GenericFieldString4 data, uint propertyMask, Coherence.Replication.Protocol.Definition.IOutBitStream bitstream)
		{
	
			if (bitstream.WriteMask((propertyMask & 0x01) != 0))
			{
				
					var v = coherenceToUnityConverters.FromUnityFixedString64(data.name);
					bitstream.WriteShortString(v);
				
			}
			propertyMask >>= 1;
	
	     }

		
	}
}

// ------------------ end of ComponentMaskSerializers.cs -----------------
#endregion



#region MessageSerializers
// -----------------------------------
//  MessageSerializers.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
	using Coherence.Replication.Protocol.Definition;
	using global::Coherence.Generated.FirstProject;
	using Unity.Transforms;
	using Replication.Unity;


public class MessageSerializers
{
    private CoherenceToUnityConverters coherenceToUnityConverters;

    public MessageSerializers(UnityMapper mapper)
    {
        coherenceToUnityConverters = new CoherenceToUnityConverters(mapper);
    }


	public void WorldPosition(IOutBitStream bitstream, Translation data)
	{

			
				var converted_value = coherenceToUnityConverters.FromUnityfloat3(data.Value);
				bitstream.WriteVector3f(converted_value, 24, 2400);
			

	}

	public void WorldOrientation(IOutBitStream bitstream, Rotation data)
	{

			
				var converted_value = coherenceToUnityConverters.FromUnityquaternion(data.Value);
				bitstream.WriteUnitRotation(converted_value);
			

	}

	public void LocalUser(IOutBitStream bitstream, LocalUser data)
	{

			
				bitstream.WriteIntegerRange(data.localIndex, 15, -9999);
			

	}

	public void WorldPositionQuery(IOutBitStream bitstream, WorldPositionQuery data)
	{

			
				var converted_position = coherenceToUnityConverters.FromUnityfloat3(data.position);
				bitstream.WriteVector3f(converted_position, 24, 2400);
			

			
				var converted_radius = coherenceToUnityConverters.FromUnityfloat(data.radius);
				bitstream.WriteFixedPoint(converted_radius, 24, 40000);
			

	}

	public void SessionBased(IOutBitStream bitstream, SessionBased data)
	{

	}

	public void GenericPrefabReference(IOutBitStream bitstream, GenericPrefabReference data)
	{

			
				var converted_prefab = coherenceToUnityConverters.FromUnityFixedString64(data.prefab);
				bitstream.WriteShortString(converted_prefab);
			

	}

	public void GenericScale(IOutBitStream bitstream, GenericScale data)
	{

			
				var converted_Value = coherenceToUnityConverters.FromUnityfloat3(data.Value);
				bitstream.WriteVector3f(converted_Value, 24, 2400);
			

	}

	public void GenericFieldInt0(IOutBitStream bitstream, GenericFieldInt0 data)
	{

			
				bitstream.WriteIntegerRange(data.number, 15, -9999);
			

	}

	public void GenericFieldInt1(IOutBitStream bitstream, GenericFieldInt1 data)
	{

			
				bitstream.WriteIntegerRange(data.number, 15, -9999);
			

	}

	public void GenericFieldInt2(IOutBitStream bitstream, GenericFieldInt2 data)
	{

			
				bitstream.WriteIntegerRange(data.number, 15, -9999);
			

	}

	public void GenericFieldInt3(IOutBitStream bitstream, GenericFieldInt3 data)
	{

			
				bitstream.WriteIntegerRange(data.number, 15, -9999);
			

	}

	public void GenericFieldInt4(IOutBitStream bitstream, GenericFieldInt4 data)
	{

			
				bitstream.WriteIntegerRange(data.number, 15, -9999);
			

	}

	public void GenericFieldInt5(IOutBitStream bitstream, GenericFieldInt5 data)
	{

			
				bitstream.WriteIntegerRange(data.number, 15, -9999);
			

	}

	public void GenericFieldInt6(IOutBitStream bitstream, GenericFieldInt6 data)
	{

			
				bitstream.WriteIntegerRange(data.number, 15, -9999);
			

	}

	public void GenericFieldInt7(IOutBitStream bitstream, GenericFieldInt7 data)
	{

			
				bitstream.WriteIntegerRange(data.number, 15, -9999);
			

	}

	public void GenericFieldInt8(IOutBitStream bitstream, GenericFieldInt8 data)
	{

			
				bitstream.WriteIntegerRange(data.number, 15, -9999);
			

	}

	public void GenericFieldInt9(IOutBitStream bitstream, GenericFieldInt9 data)
	{

			
				bitstream.WriteIntegerRange(data.number, 15, -9999);
			

	}

	public void GenericFieldFloat0(IOutBitStream bitstream, GenericFieldFloat0 data)
	{

			
				var converted_number = coherenceToUnityConverters.FromUnityfloat(data.number);
				bitstream.WriteFixedPoint(converted_number, 24, 40000);
			

	}

	public void GenericFieldFloat1(IOutBitStream bitstream, GenericFieldFloat1 data)
	{

			
				var converted_number = coherenceToUnityConverters.FromUnityfloat(data.number);
				bitstream.WriteFixedPoint(converted_number, 24, 40000);
			

	}

	public void GenericFieldFloat2(IOutBitStream bitstream, GenericFieldFloat2 data)
	{

			
				var converted_number = coherenceToUnityConverters.FromUnityfloat(data.number);
				bitstream.WriteFixedPoint(converted_number, 24, 40000);
			

	}

	public void GenericFieldFloat3(IOutBitStream bitstream, GenericFieldFloat3 data)
	{

			
				var converted_number = coherenceToUnityConverters.FromUnityfloat(data.number);
				bitstream.WriteFixedPoint(converted_number, 24, 40000);
			

	}

	public void GenericFieldFloat4(IOutBitStream bitstream, GenericFieldFloat4 data)
	{

			
				var converted_number = coherenceToUnityConverters.FromUnityfloat(data.number);
				bitstream.WriteFixedPoint(converted_number, 24, 40000);
			

	}

	public void GenericFieldFloat5(IOutBitStream bitstream, GenericFieldFloat5 data)
	{

			
				var converted_number = coherenceToUnityConverters.FromUnityfloat(data.number);
				bitstream.WriteFixedPoint(converted_number, 24, 40000);
			

	}

	public void GenericFieldFloat6(IOutBitStream bitstream, GenericFieldFloat6 data)
	{

			
				var converted_number = coherenceToUnityConverters.FromUnityfloat(data.number);
				bitstream.WriteFixedPoint(converted_number, 24, 40000);
			

	}

	public void GenericFieldFloat7(IOutBitStream bitstream, GenericFieldFloat7 data)
	{

			
				var converted_number = coherenceToUnityConverters.FromUnityfloat(data.number);
				bitstream.WriteFixedPoint(converted_number, 24, 40000);
			

	}

	public void GenericFieldFloat8(IOutBitStream bitstream, GenericFieldFloat8 data)
	{

			
				var converted_number = coherenceToUnityConverters.FromUnityfloat(data.number);
				bitstream.WriteFixedPoint(converted_number, 24, 40000);
			

	}

	public void GenericFieldFloat9(IOutBitStream bitstream, GenericFieldFloat9 data)
	{

			
				var converted_number = coherenceToUnityConverters.FromUnityfloat(data.number);
				bitstream.WriteFixedPoint(converted_number, 24, 40000);
			

	}

	public void GenericFieldVector0(IOutBitStream bitstream, GenericFieldVector0 data)
	{

			
				var converted_Value = coherenceToUnityConverters.FromUnityfloat3(data.Value);
				bitstream.WriteVector3f(converted_Value, 24, 2400);
			

	}

	public void GenericFieldVector1(IOutBitStream bitstream, GenericFieldVector1 data)
	{

			
				var converted_Value = coherenceToUnityConverters.FromUnityfloat3(data.Value);
				bitstream.WriteVector3f(converted_Value, 24, 2400);
			

	}

	public void GenericFieldVector2(IOutBitStream bitstream, GenericFieldVector2 data)
	{

			
				var converted_Value = coherenceToUnityConverters.FromUnityfloat3(data.Value);
				bitstream.WriteVector3f(converted_Value, 24, 2400);
			

	}

	public void GenericFieldVector3(IOutBitStream bitstream, GenericFieldVector3 data)
	{

			
				var converted_Value = coherenceToUnityConverters.FromUnityfloat3(data.Value);
				bitstream.WriteVector3f(converted_Value, 24, 2400);
			

	}

	public void GenericFieldString0(IOutBitStream bitstream, GenericFieldString0 data)
	{

			
				var converted_name = coherenceToUnityConverters.FromUnityFixedString64(data.name);
				bitstream.WriteShortString(converted_name);
			

	}

	public void GenericFieldString1(IOutBitStream bitstream, GenericFieldString1 data)
	{

			
				var converted_name = coherenceToUnityConverters.FromUnityFixedString64(data.name);
				bitstream.WriteShortString(converted_name);
			

	}

	public void GenericFieldString2(IOutBitStream bitstream, GenericFieldString2 data)
	{

			
				var converted_name = coherenceToUnityConverters.FromUnityFixedString64(data.name);
				bitstream.WriteShortString(converted_name);
			

	}

	public void GenericFieldString4(IOutBitStream bitstream, GenericFieldString4 data)
	{

			
				var converted_name = coherenceToUnityConverters.FromUnityFixedString64(data.name);
				bitstream.WriteShortString(converted_name);
			

	}

	public void GenericCommand(IOutBitStream bitstream, GenericCommand data)
	{

			
				var converted_name = coherenceToUnityConverters.FromUnityFixedString64(data.name);
				bitstream.WriteShortString(converted_name);
			

			
				bitstream.WriteIntegerRange(data.paramInt1, 15, -9999);
			

			
				bitstream.WriteIntegerRange(data.paramInt2, 15, -9999);
			

			
				bitstream.WriteIntegerRange(data.paramInt3, 15, -9999);
			

			
				bitstream.WriteIntegerRange(data.paramInt4, 15, -9999);
			

			
				var converted_paramFloat1 = coherenceToUnityConverters.FromUnityfloat(data.paramFloat1);
				bitstream.WriteFixedPoint(converted_paramFloat1, 24, 40000);
			

			
				var converted_paramFloat2 = coherenceToUnityConverters.FromUnityfloat(data.paramFloat2);
				bitstream.WriteFixedPoint(converted_paramFloat2, 24, 40000);
			

			
				var converted_paramFloat3 = coherenceToUnityConverters.FromUnityfloat(data.paramFloat3);
				bitstream.WriteFixedPoint(converted_paramFloat3, 24, 40000);
			

			
				var converted_paramFloat4 = coherenceToUnityConverters.FromUnityfloat(data.paramFloat4);
				bitstream.WriteFixedPoint(converted_paramFloat4, 24, 40000);
			

			
				var converted_paramString = coherenceToUnityConverters.FromUnityFixedString64(data.paramString);
				bitstream.WriteShortString(converted_paramString);
			

	}


/// ------------------------ Requests --------------------------

	public void GenericCommandRequest(IOutBitStream bitstream, GenericCommandRequest data)
	{

			
				var converted_name = coherenceToUnityConverters.FromUnityFixedString64(data.name);
				bitstream.WriteShortString(converted_name);
			

			
				bitstream.WriteIntegerRange(data.paramInt1, 15, -9999);
			

			
				bitstream.WriteIntegerRange(data.paramInt2, 15, -9999);
			

			
				bitstream.WriteIntegerRange(data.paramInt3, 15, -9999);
			

			
				bitstream.WriteIntegerRange(data.paramInt4, 15, -9999);
			

			
				var converted_paramFloat1 = coherenceToUnityConverters.FromUnityfloat(data.paramFloat1);
				bitstream.WriteFixedPoint(converted_paramFloat1, 24, 40000);
			

			
				var converted_paramFloat2 = coherenceToUnityConverters.FromUnityfloat(data.paramFloat2);
				bitstream.WriteFixedPoint(converted_paramFloat2, 24, 40000);
			

			
				var converted_paramFloat3 = coherenceToUnityConverters.FromUnityfloat(data.paramFloat3);
				bitstream.WriteFixedPoint(converted_paramFloat3, 24, 40000);
			

			
				var converted_paramFloat4 = coherenceToUnityConverters.FromUnityfloat(data.paramFloat4);
				bitstream.WriteFixedPoint(converted_paramFloat4, 24, 40000);
			

			
				var converted_paramString = coherenceToUnityConverters.FromUnityFixedString64(data.paramString);
				bitstream.WriteShortString(converted_paramString);
			

	}



}

}

// ------------------ end of MessageSerializers.cs -----------------
#endregion



#region MessageDeserializers
// -----------------------------------
//  MessageDeserializers.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
	using Coherence.Replication.Protocol.Definition;
	using global::Coherence.Generated.FirstProject;
	using Unity.Transforms;	
	using Replication.Unity;


public class MessageDeserializers
{
    private CoherenceToUnityConverters coherenceToUnityConverters;

    public MessageDeserializers(UnityMapper mapper)
    {
        coherenceToUnityConverters = new CoherenceToUnityConverters(mapper);
    }


	public void Translation(IInBitStream bitstream, ref Translation data)
	{

			
				var value = bitstream.ReadVector3f(24, 2400);
				data.Value = coherenceToUnityConverters.ToUnityfloat3(value);
			
     
	}

	public void Rotation(IInBitStream bitstream, ref Rotation data)
	{

			
				var value = bitstream.ReadUnitRotation();
				data.Value = coherenceToUnityConverters.ToUnityquaternion(value);
			
     
	}

	public void LocalUser(IInBitStream bitstream, ref LocalUser data)
	{

			
				data.localIndex =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void WorldPositionQuery(IInBitStream bitstream, ref WorldPositionQuery data)
	{

			
				var position = bitstream.ReadVector3f(24, 2400);
				data.position = coherenceToUnityConverters.ToUnityfloat3(position);
			

			
				var radius = bitstream.ReadFixedPoint(24, 40000);
				data.radius = coherenceToUnityConverters.ToUnityfloat(radius);
			
     
	}

	public void SessionBased(IInBitStream bitstream, ref SessionBased data)
	{
     
	}

	public void GenericPrefabReference(IInBitStream bitstream, ref GenericPrefabReference data)
	{

			
				var prefab = bitstream.ReadShortString();
				data.prefab = coherenceToUnityConverters.ToUnityFixedString64(prefab);
			
     
	}

	public void GenericScale(IInBitStream bitstream, ref GenericScale data)
	{

			
				var Value = bitstream.ReadVector3f(24, 2400);
				data.Value = coherenceToUnityConverters.ToUnityfloat3(Value);
			
     
	}

	public void GenericFieldInt0(IInBitStream bitstream, ref GenericFieldInt0 data)
	{

			
				data.number =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void GenericFieldInt1(IInBitStream bitstream, ref GenericFieldInt1 data)
	{

			
				data.number =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void GenericFieldInt2(IInBitStream bitstream, ref GenericFieldInt2 data)
	{

			
				data.number =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void GenericFieldInt3(IInBitStream bitstream, ref GenericFieldInt3 data)
	{

			
				data.number =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void GenericFieldInt4(IInBitStream bitstream, ref GenericFieldInt4 data)
	{

			
				data.number =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void GenericFieldInt5(IInBitStream bitstream, ref GenericFieldInt5 data)
	{

			
				data.number =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void GenericFieldInt6(IInBitStream bitstream, ref GenericFieldInt6 data)
	{

			
				data.number =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void GenericFieldInt7(IInBitStream bitstream, ref GenericFieldInt7 data)
	{

			
				data.number =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void GenericFieldInt8(IInBitStream bitstream, ref GenericFieldInt8 data)
	{

			
				data.number =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void GenericFieldInt9(IInBitStream bitstream, ref GenericFieldInt9 data)
	{

			
				data.number =  bitstream.ReadIntegerRange(15, -9999);
			
     
	}

	public void GenericFieldFloat0(IInBitStream bitstream, ref GenericFieldFloat0 data)
	{

			
				var number = bitstream.ReadFixedPoint(24, 40000);
				data.number = coherenceToUnityConverters.ToUnityfloat(number);
			
     
	}

	public void GenericFieldFloat1(IInBitStream bitstream, ref GenericFieldFloat1 data)
	{

			
				var number = bitstream.ReadFixedPoint(24, 40000);
				data.number = coherenceToUnityConverters.ToUnityfloat(number);
			
     
	}

	public void GenericFieldFloat2(IInBitStream bitstream, ref GenericFieldFloat2 data)
	{

			
				var number = bitstream.ReadFixedPoint(24, 40000);
				data.number = coherenceToUnityConverters.ToUnityfloat(number);
			
     
	}

	public void GenericFieldFloat3(IInBitStream bitstream, ref GenericFieldFloat3 data)
	{

			
				var number = bitstream.ReadFixedPoint(24, 40000);
				data.number = coherenceToUnityConverters.ToUnityfloat(number);
			
     
	}

	public void GenericFieldFloat4(IInBitStream bitstream, ref GenericFieldFloat4 data)
	{

			
				var number = bitstream.ReadFixedPoint(24, 40000);
				data.number = coherenceToUnityConverters.ToUnityfloat(number);
			
     
	}

	public void GenericFieldFloat5(IInBitStream bitstream, ref GenericFieldFloat5 data)
	{

			
				var number = bitstream.ReadFixedPoint(24, 40000);
				data.number = coherenceToUnityConverters.ToUnityfloat(number);
			
     
	}

	public void GenericFieldFloat6(IInBitStream bitstream, ref GenericFieldFloat6 data)
	{

			
				var number = bitstream.ReadFixedPoint(24, 40000);
				data.number = coherenceToUnityConverters.ToUnityfloat(number);
			
     
	}

	public void GenericFieldFloat7(IInBitStream bitstream, ref GenericFieldFloat7 data)
	{

			
				var number = bitstream.ReadFixedPoint(24, 40000);
				data.number = coherenceToUnityConverters.ToUnityfloat(number);
			
     
	}

	public void GenericFieldFloat8(IInBitStream bitstream, ref GenericFieldFloat8 data)
	{

			
				var number = bitstream.ReadFixedPoint(24, 40000);
				data.number = coherenceToUnityConverters.ToUnityfloat(number);
			
     
	}

	public void GenericFieldFloat9(IInBitStream bitstream, ref GenericFieldFloat9 data)
	{

			
				var number = bitstream.ReadFixedPoint(24, 40000);
				data.number = coherenceToUnityConverters.ToUnityfloat(number);
			
     
	}

	public void GenericFieldVector0(IInBitStream bitstream, ref GenericFieldVector0 data)
	{

			
				var Value = bitstream.ReadVector3f(24, 2400);
				data.Value = coherenceToUnityConverters.ToUnityfloat3(Value);
			
     
	}

	public void GenericFieldVector1(IInBitStream bitstream, ref GenericFieldVector1 data)
	{

			
				var Value = bitstream.ReadVector3f(24, 2400);
				data.Value = coherenceToUnityConverters.ToUnityfloat3(Value);
			
     
	}

	public void GenericFieldVector2(IInBitStream bitstream, ref GenericFieldVector2 data)
	{

			
				var Value = bitstream.ReadVector3f(24, 2400);
				data.Value = coherenceToUnityConverters.ToUnityfloat3(Value);
			
     
	}

	public void GenericFieldVector3(IInBitStream bitstream, ref GenericFieldVector3 data)
	{

			
				var Value = bitstream.ReadVector3f(24, 2400);
				data.Value = coherenceToUnityConverters.ToUnityfloat3(Value);
			
     
	}

	public void GenericFieldString0(IInBitStream bitstream, ref GenericFieldString0 data)
	{

			
				var name = bitstream.ReadShortString();
				data.name = coherenceToUnityConverters.ToUnityFixedString64(name);
			
     
	}

	public void GenericFieldString1(IInBitStream bitstream, ref GenericFieldString1 data)
	{

			
				var name = bitstream.ReadShortString();
				data.name = coherenceToUnityConverters.ToUnityFixedString64(name);
			
     
	}

	public void GenericFieldString2(IInBitStream bitstream, ref GenericFieldString2 data)
	{

			
				var name = bitstream.ReadShortString();
				data.name = coherenceToUnityConverters.ToUnityFixedString64(name);
			
     
	}

	public void GenericFieldString4(IInBitStream bitstream, ref GenericFieldString4 data)
	{

			
				var name = bitstream.ReadShortString();
				data.name = coherenceToUnityConverters.ToUnityFixedString64(name);
			
     
	}

	public void GenericCommand(IInBitStream bitstream, ref GenericCommand data)
	{

			
				var name = bitstream.ReadShortString();
				data.name = coherenceToUnityConverters.ToUnityFixedString64(name);
			

			
				data.paramInt1 =  bitstream.ReadIntegerRange(15, -9999);
			

			
				data.paramInt2 =  bitstream.ReadIntegerRange(15, -9999);
			

			
				data.paramInt3 =  bitstream.ReadIntegerRange(15, -9999);
			

			
				data.paramInt4 =  bitstream.ReadIntegerRange(15, -9999);
			

			
				var paramFloat1 = bitstream.ReadFixedPoint(24, 40000);
				data.paramFloat1 = coherenceToUnityConverters.ToUnityfloat(paramFloat1);
			

			
				var paramFloat2 = bitstream.ReadFixedPoint(24, 40000);
				data.paramFloat2 = coherenceToUnityConverters.ToUnityfloat(paramFloat2);
			

			
				var paramFloat3 = bitstream.ReadFixedPoint(24, 40000);
				data.paramFloat3 = coherenceToUnityConverters.ToUnityfloat(paramFloat3);
			

			
				var paramFloat4 = bitstream.ReadFixedPoint(24, 40000);
				data.paramFloat4 = coherenceToUnityConverters.ToUnityfloat(paramFloat4);
			

			
				var paramString = bitstream.ReadShortString();
				data.paramString = coherenceToUnityConverters.ToUnityFixedString64(paramString);
			
     
	}


}

}

// ------------------ end of MessageDeserializers.cs -----------------
#endregion



#region CommandDeserializers
// -----------------------------------
//  CommandDeserializers.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
	using global::Coherence.Generated.FirstProject;
	using Coherence.Log;
	using Unity.Entities;
	using Replication.Client.Unity.Ecs;
	using Coherence.Replication.Unity;

	public class PerformCommands : IPerformCommand
	{
        private MessageDeserializers messageDeserializers;

         public PerformCommands(UnityMapper mapper)
         {
             messageDeserializers = new MessageDeserializers(mapper);
         }

		public void PerformCommand(EntityManager mgr, Entity entity, uint commandTypeID, Coherence.Replication.Protocol.Definition.IInBitStream bitStream, ILog log)
		{

			switch (commandTypeID)
			{

				case TypeIds.InternalGenericCommand:
				{
					var hasRequestBuffer = mgr.HasComponent<GenericCommand>(entity);
					if (!hasRequestBuffer)
					{
						mgr.AddBuffer<GenericCommand>(entity);
					}
					var buffer = mgr.GetBuffer<GenericCommand>(entity);
					var data = new GenericCommand();
					messageDeserializers.GenericCommand(bitStream, ref data);
					buffer.Add(data);
					break;
				}

			}

		}
	}
}


// ------------------ end of CommandDeserializers.cs -----------------
#endregion



#region RuntimeSystem
// -----------------------------------
//  RuntimeSystem.cs
// -----------------------------------
			
namespace Coherence.Sdk.Unity
{
	using Coherence.Generated.Internal.Schema;
	using global::Unity.Entities;
	using global::Unity.Transforms;
	using Coherence.Log;
	using Replication.Client.Unity.Ecs;
	using global::Coherence.Generated.FirstProject;

	[UpdateInGroup(typeof(SimulationSystemGroup))]
	public class CoherenceRuntimeSystem : ComponentSystem
	{
		protected override void OnCreate()
		{
			#region Register all known component types and their enums
			           GlobalLookups.Register<Translation>(TypeEnums.InternalWorldPosition);
           GlobalLookups.Register<Rotation>(TypeEnums.InternalWorldOrientation);
           GlobalLookups.Register<LocalUser>(TypeEnums.InternalLocalUser);
           GlobalLookups.Register<WorldPositionQuery>(TypeEnums.InternalWorldPositionQuery);
           GlobalLookups.Register<SessionBased>(TypeEnums.InternalSessionBased);
           GlobalLookups.Register<GenericPrefabReference>(TypeEnums.InternalGenericPrefabReference);
           GlobalLookups.Register<GenericScale>(TypeEnums.InternalGenericScale);
           GlobalLookups.Register<GenericFieldInt0>(TypeEnums.InternalGenericFieldInt0);
           GlobalLookups.Register<GenericFieldInt1>(TypeEnums.InternalGenericFieldInt1);
           GlobalLookups.Register<GenericFieldInt2>(TypeEnums.InternalGenericFieldInt2);
           GlobalLookups.Register<GenericFieldInt3>(TypeEnums.InternalGenericFieldInt3);
           GlobalLookups.Register<GenericFieldInt4>(TypeEnums.InternalGenericFieldInt4);
           GlobalLookups.Register<GenericFieldInt5>(TypeEnums.InternalGenericFieldInt5);
           GlobalLookups.Register<GenericFieldInt6>(TypeEnums.InternalGenericFieldInt6);
           GlobalLookups.Register<GenericFieldInt7>(TypeEnums.InternalGenericFieldInt7);
           GlobalLookups.Register<GenericFieldInt8>(TypeEnums.InternalGenericFieldInt8);
           GlobalLookups.Register<GenericFieldInt9>(TypeEnums.InternalGenericFieldInt9);
           GlobalLookups.Register<GenericFieldFloat0>(TypeEnums.InternalGenericFieldFloat0);
           GlobalLookups.Register<GenericFieldFloat1>(TypeEnums.InternalGenericFieldFloat1);
           GlobalLookups.Register<GenericFieldFloat2>(TypeEnums.InternalGenericFieldFloat2);
           GlobalLookups.Register<GenericFieldFloat3>(TypeEnums.InternalGenericFieldFloat3);
           GlobalLookups.Register<GenericFieldFloat4>(TypeEnums.InternalGenericFieldFloat4);
           GlobalLookups.Register<GenericFieldFloat5>(TypeEnums.InternalGenericFieldFloat5);
           GlobalLookups.Register<GenericFieldFloat6>(TypeEnums.InternalGenericFieldFloat6);
           GlobalLookups.Register<GenericFieldFloat7>(TypeEnums.InternalGenericFieldFloat7);
           GlobalLookups.Register<GenericFieldFloat8>(TypeEnums.InternalGenericFieldFloat8);
           GlobalLookups.Register<GenericFieldFloat9>(TypeEnums.InternalGenericFieldFloat9);
           GlobalLookups.Register<GenericFieldVector0>(TypeEnums.InternalGenericFieldVector0);
           GlobalLookups.Register<GenericFieldVector1>(TypeEnums.InternalGenericFieldVector1);
           GlobalLookups.Register<GenericFieldVector2>(TypeEnums.InternalGenericFieldVector2);
           GlobalLookups.Register<GenericFieldVector3>(TypeEnums.InternalGenericFieldVector3);
           GlobalLookups.Register<GenericFieldString0>(TypeEnums.InternalGenericFieldString0);
           GlobalLookups.Register<GenericFieldString1>(TypeEnums.InternalGenericFieldString1);
           GlobalLookups.Register<GenericFieldString2>(TypeEnums.InternalGenericFieldString2);
           GlobalLookups.Register<GenericFieldString4>(TypeEnums.InternalGenericFieldString4);

			#endregion

			#region Register all known component types and their component type id
			           GlobalTypeIdLookups.Register<Translation>(TypeIds.InternalWorldPosition);
           GlobalTypeIdLookups.Register<Rotation>(TypeIds.InternalWorldOrientation);
           GlobalTypeIdLookups.Register<LocalUser>(TypeIds.InternalLocalUser);
           GlobalTypeIdLookups.Register<WorldPositionQuery>(TypeIds.InternalWorldPositionQuery);
           GlobalTypeIdLookups.Register<SessionBased>(TypeIds.InternalSessionBased);
           GlobalTypeIdLookups.Register<GenericPrefabReference>(TypeIds.InternalGenericPrefabReference);
           GlobalTypeIdLookups.Register<GenericScale>(TypeIds.InternalGenericScale);
           GlobalTypeIdLookups.Register<GenericFieldInt0>(TypeIds.InternalGenericFieldInt0);
           GlobalTypeIdLookups.Register<GenericFieldInt1>(TypeIds.InternalGenericFieldInt1);
           GlobalTypeIdLookups.Register<GenericFieldInt2>(TypeIds.InternalGenericFieldInt2);
           GlobalTypeIdLookups.Register<GenericFieldInt3>(TypeIds.InternalGenericFieldInt3);
           GlobalTypeIdLookups.Register<GenericFieldInt4>(TypeIds.InternalGenericFieldInt4);
           GlobalTypeIdLookups.Register<GenericFieldInt5>(TypeIds.InternalGenericFieldInt5);
           GlobalTypeIdLookups.Register<GenericFieldInt6>(TypeIds.InternalGenericFieldInt6);
           GlobalTypeIdLookups.Register<GenericFieldInt7>(TypeIds.InternalGenericFieldInt7);
           GlobalTypeIdLookups.Register<GenericFieldInt8>(TypeIds.InternalGenericFieldInt8);
           GlobalTypeIdLookups.Register<GenericFieldInt9>(TypeIds.InternalGenericFieldInt9);
           GlobalTypeIdLookups.Register<GenericFieldFloat0>(TypeIds.InternalGenericFieldFloat0);
           GlobalTypeIdLookups.Register<GenericFieldFloat1>(TypeIds.InternalGenericFieldFloat1);
           GlobalTypeIdLookups.Register<GenericFieldFloat2>(TypeIds.InternalGenericFieldFloat2);
           GlobalTypeIdLookups.Register<GenericFieldFloat3>(TypeIds.InternalGenericFieldFloat3);
           GlobalTypeIdLookups.Register<GenericFieldFloat4>(TypeIds.InternalGenericFieldFloat4);
           GlobalTypeIdLookups.Register<GenericFieldFloat5>(TypeIds.InternalGenericFieldFloat5);
           GlobalTypeIdLookups.Register<GenericFieldFloat6>(TypeIds.InternalGenericFieldFloat6);
           GlobalTypeIdLookups.Register<GenericFieldFloat7>(TypeIds.InternalGenericFieldFloat7);
           GlobalTypeIdLookups.Register<GenericFieldFloat8>(TypeIds.InternalGenericFieldFloat8);
           GlobalTypeIdLookups.Register<GenericFieldFloat9>(TypeIds.InternalGenericFieldFloat9);
           GlobalTypeIdLookups.Register<GenericFieldVector0>(TypeIds.InternalGenericFieldVector0);
           GlobalTypeIdLookups.Register<GenericFieldVector1>(TypeIds.InternalGenericFieldVector1);
           GlobalTypeIdLookups.Register<GenericFieldVector2>(TypeIds.InternalGenericFieldVector2);
           GlobalTypeIdLookups.Register<GenericFieldVector3>(TypeIds.InternalGenericFieldVector3);
           GlobalTypeIdLookups.Register<GenericFieldString0>(TypeIds.InternalGenericFieldString0);
           GlobalTypeIdLookups.Register<GenericFieldString1>(TypeIds.InternalGenericFieldString1);
           GlobalTypeIdLookups.Register<GenericFieldString2>(TypeIds.InternalGenericFieldString2);
           GlobalTypeIdLookups.Register<GenericFieldString4>(TypeIds.InternalGenericFieldString4);

			#endregion

			base.OnCreate();
		}

		protected override void OnUpdate()
		{
		}
	}
}

// ------------------ end of RuntimeSystem.cs -----------------
#endregion



#region DetectEntityCreateAndDestroy
// -----------------------------------
//  DetectEntityCreateAndDestroy.cs
// -----------------------------------
			

namespace Coherence.Generated.Internal.Schema
{
    using Replication.Client.Unity.Ecs;
	using Unity.Collections;
    using Unity.Entities;
    using Replication.Unity;
    using Unity.Transforms;
    using UnityEngine;    
    
    // ReSharper disable once ClassNeverInstantiated.Global
    [UpdateInGroup(typeof(PresentationSystemGroup))]
    [UpdateBefore(typeof(SyncSendSystem))]
    public class DetectEntityCreateSystem : SystemBase
    {
        protected override void OnUpdate()
        {
            if (World.GetExistingSystem<SyncSendSystem>().Sender == null)
            {
                Debug.LogWarning("No sender");
                return;
            }
            var mapper = World.GetExistingSystem<SyncSendSystem>().Sender.Mapper;
            
            Entities.WithNone<Mapped>().ForEach((Entity entity, int entityInQueryIndex, in Simulated simulate) =>
            {
                var id = mapper.NextEntityId;
                mapper.Add(id, entity);
                EntityManager.AddComponent<Mapped>(entity);
            }).WithStructuralChanges().WithoutBurst().Run();

            Dependency.Complete();
       }
    }
} // namespace
        


// ------------------ end of DetectEntityCreateAndDestroy.cs -----------------
#endregion



#region DetectCommandSent
// -----------------------------------
//  DetectCommandSent.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
    using UnityEngine;
    using Unity.Entities;
    using global::Coherence.Generated.FirstProject;

    using Message;
    using Message.Serializer.Serialize;
    using Coherence.Brisk.Connect;
    using Coherence.Brook;
    using Coherence.Log;
    using Replication.Client.Unity.Ecs;
    using Replication.Unity;

   // ReSharper disable once ClassNeverInstantiated.Global
    [UpdateInGroup(typeof(PresentationSystemGroup))]
    [AlwaysUpdateSystem]
    public class DetectCommandsSentSystem : SystemBase
    {
        private bool isBooted;
	    private Sender cachedSender;
		private MessageSerializers messageSerializers;

        void BootUp()
        {
            var netSys = World.GetOrCreateSystem<NetworkSystem>();
			messageSerializers = new MessageSerializers(netSys.Mapper);
        }

	    protected override void OnUpdate()
	    {
	        if (!isBooted)
	        {
		        BootUp();
		        isBooted = true;
	        }

		    if (cachedSender == null)
		    {
			    cachedSender = World.GetExistingSystem<SyncSendSystem>().Sender;
			    if (cachedSender == null)
			    {
				    return;
			    }
            }

	        var burstSender = cachedSender;
	        var mapper = cachedSender.Mapper;



#region GenericCommandRequest
			// ------------  GenericCommandRequest --------------
            Entities
                .ForEach((Entity entity, DynamicBuffer<GenericCommandRequest> buffer) =>
                    {
                        if (buffer.Length == 0)
                        {
                            return;
                        }
                        var rawArray = buffer.Reinterpret<GenericCommandRequest>();
                        
                        Debug.LogWarning($"I will send {rawArray.Length} GenericCommandRequest commands to entity: {entity}");

                        var foundEntity = mapper.ToCoherenceEntityId(entity, out var coherenceEntityId);
                        if (!foundEntity)
                        {
	                        Debug.LogError($"send command request. Can not find entity {entity}");
	                        return;
                        }
                        
						for (var i=0; i<rawArray.Length; i++)
                        {
	                        var item = rawArray[i];
	                        var octetStream = new OctetWriter(512);
	                        var bitStream = new OutBitStream(octetStream);
	                        EntityIdSerializer.Serialize(coherenceEntityId, bitStream);
	                        var protocol = new Coherence.FieldStream.Serialize.Streams.OutBitStream(bitStream, null);

	                        // --------- Type Specific Part ---------------
	                        ComponentTypeIdSerializer.Serialize(TypeIds.InternalGenericCommand, bitStream);
	                        messageSerializers.GenericCommandRequest(protocol, item);
	                        // --------------------------------------------

	                        bitStream.Flush();
	                        var payload = new BitSerializedMessage(octetStream.Octets, bitStream.Tell);
	                        burstSender.MessageChannels.PushEntityCommand(payload);
                        }

                        buffer.Clear();
					}).WithoutBurst().Run();
#endregion


        }
    }

}


// ------------------ end of DetectCommandSent.cs -----------------
#endregion



#region ReceiveUpdate
// -----------------------------------
//  ReceiveUpdate.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
	using Coherence.Ecs;
	using Coherence.DeltaEcs;
	using Coherence.Replication.Unity;
	using Coherence.Replication.Client.Unity.Ecs;
	using global::Unity.Transforms;
	using global::Unity.Collections;
	using global::Unity.Entities;
	using Coherence.Brook;
	using Coherence.Log;
	using Coherence.SimulationFrame;
	using global::Coherence.Generated.FirstProject;

	public class ReceiveUpdate : IReceiveUpdate
	{
		private readonly ISchemaSpecificComponentDeserialize componentDeserialize;
		private readonly ILog log;
		private UnityMapper mapper;
		private readonly ISchemaSpecificComponentDeserializerAndSkip componentSkip;
		private NativeHashMap<Entity, DetectedEntityDeletion> destroyedEntities;

		public ReceiveUpdate(ISchemaSpecificComponentDeserialize componentDeserialize,  ISchemaSpecificComponentDeserializerAndSkip componentSkip, UnityMapper mapper, NativeHashMap<Entity, DetectedEntityDeletion> destroyedEntities, ILog log)
		{
			this.componentDeserialize = componentDeserialize;
			this.componentSkip = componentSkip;
			this.mapper = mapper;
			this.log = log;
			this.destroyedEntities = destroyedEntities;
		}

		private void DestroyComponentData(EntityManager entityManager, Entity entity, uint componentType)
		{
			switch (componentType)
			{

				case TypeIds.InternalWorldPosition:
				{
					var hasComponentData = entityManager.HasComponent<Translation>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<Translation>(entity);
					}
					break;
				}

				case TypeIds.InternalWorldOrientation:
				{
					var hasComponentData = entityManager.HasComponent<Rotation>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<Rotation>(entity);
					}
					break;
				}

				case TypeIds.InternalLocalUser:
				{
					var hasComponentData = entityManager.HasComponent<LocalUser>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<LocalUser>(entity);
					}
					break;
				}

				case TypeIds.InternalWorldPositionQuery:
				{
					var hasComponentData = entityManager.HasComponent<WorldPositionQuery>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<WorldPositionQuery>(entity);
					}
					break;
				}

				case TypeIds.InternalSessionBased:
				{
					var hasComponentData = entityManager.HasComponent<SessionBased>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<SessionBased>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericPrefabReference:
				{
					var hasComponentData = entityManager.HasComponent<GenericPrefabReference>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericPrefabReference>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericScale:
				{
					var hasComponentData = entityManager.HasComponent<GenericScale>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericScale>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt0>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldInt0>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt1>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldInt1>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt2>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldInt2>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt3:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt3>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldInt3>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt4:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt4>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldInt4>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt5:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt5>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldInt5>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt6:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt6>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldInt6>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt7:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt7>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldInt7>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt8:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt8>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldInt8>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt9:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt9>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldInt9>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat0>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldFloat0>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat1>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldFloat1>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat2>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldFloat2>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat3:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat3>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldFloat3>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat4:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat4>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldFloat4>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat5:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat5>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldFloat5>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat6:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat6>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldFloat6>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat7:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat7>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldFloat7>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat8:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat8>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldFloat8>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat9:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat9>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldFloat9>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector0>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldVector0>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector1>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldVector1>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector2>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldVector2>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector3:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector3>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldVector3>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldString0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString0>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldString0>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldString1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString1>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldString1>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldString2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString2>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldString2>(entity);
					}
					break;
				}

				case TypeIds.InternalGenericFieldString4:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString4>(entity);
					if (hasComponentData)
					{
						entityManager.RemoveComponent<GenericFieldString4>(entity);
					}
					break;
				}

				default:
				{
					log.Warning($"Unknown component", "component", componentType);
					break;
				}
			}
		}

		private void UpdateComponents(EntityManager entityManager, Entity entity, AbsoluteSimulationFrame simulationFrame, IInBitStream bitStream)
		{
			var componentCount = Deserializator.ReadComponentCount(bitStream, log);
			for (var i = 0; i < componentCount; i++)
			{
				var componentState = Deserializator.ReadComponentState(bitStream, log);
				var componentId = Deserializator.ReadComponentId(bitStream, log);
				switch (componentState)
				{
					case ComponentState.Construct:
						{
							var componentTypeId = Deserializator.ReadComponentTypeId(bitStream, log);

							componentDeserialize.CreateIfNeededAndReadComponentDataUpdate(entityManager,
								entity, componentTypeId, simulationFrame, bitStream, log);
						}
						break;
					case ComponentState.Update:
						{
							// TODO: lookup component ID from state.
							var updateComponentTypeId = componentId;
							componentDeserialize.ReadComponentDataUpdate(entityManager, entity,
								updateComponentTypeId, simulationFrame, bitStream, log);
						}
						break;
					case ComponentState.Destruct:
						{
							var destroyComponentTypeId = componentId;
							DestroyComponentData(entityManager, entity, destroyComponentTypeId);
						}
						break;
				}
			}
		}

		public void PerformUpdate(EntityManager entityManager, AbsoluteSimulationFrame simulationFrame, IInBitStream bitStream)
		{
			var deserializeEntity = new Deserializator();

			while (deserializeEntity.ReadEntity(bitStream, out var entityWithMeta, log))
			{
				var entity = mapper.ToUnityEntity(entityWithMeta.EntityId, false);

				// Skip locally destroyed entities
				if (destroyedEntities.ContainsKey(entity))
				{
					if (!entityWithMeta.IsDeleted)
					{
						DeserializeComponentSkip.SkipComponents(componentSkip, bitStream, log);
					}
					continue;
				}

				// Meta information concerns entity creation, destruction and ownership
				if (entityWithMeta.HasMeta)
				{
					entity = PerformEntityMetaUpdate(entityManager, entityWithMeta, entity);
				}

				// Deserialize and apply component updates
				if (entity != default)
				{
					if (entityManager.HasComponent<Simulated>(entity))
					{
						DeserializeComponentSkip.SkipComponents(componentSkip, bitStream, log);
						log.Warning($"Trying to update owned entity {entityWithMeta.EntityId}");
					}
					else
					{
						UpdateComponents(entityManager, entity, simulationFrame, bitStream);
					}
				} else if (!entityWithMeta.IsDeleted)
				{
					// An error has occurred if the entity is null unless it's because it was just deleted
					log.Warning($"Entity is missing {entityWithMeta.EntityId}");
				}
			}
		}

		private Entity PerformEntityMetaUpdate(EntityManager entityManager, Deserializator.EntityWithMeta entityWithMeta, Entity entity)
		{
			// Entities are CREATED implicitly if they do not exist
			if (entity == default || !entityManager.Exists(entity))
			{
				if (entity != default)
				{
					UnityEngine.Debug.LogWarning("entity might still be mapped: " + entity + " CID: " + entityWithMeta.EntityId);
				}
				if (mapper.IsEntityIdInUse(entityWithMeta.EntityId))
				{
					UnityEngine.Debug.LogWarning("entity index already in use: " + entityWithMeta.EntityId);
					return default;
				}
				entity = entityManager.CreateEntity();
				mapper.Add(entityWithMeta.EntityId, entity);
				entityManager.AddComponent<Mapped>(entity);
			}

			// Entities OWNERSHIP determines iff they should have Simulated
			var hasComponentData = entityManager.HasComponent<Simulated>(entity);
			if (hasComponentData && !entityWithMeta.Ownership)
			{
				entityManager.RemoveComponent<Simulated>(entity);
				entityManager.RemoveComponent<LingerSimulated>(entity);
				RemoveSyncComponents(entityManager, entity);
			}
			else if (!hasComponentData && entityWithMeta.Ownership)
			{
				entityManager.AddComponentData(entity, new Simulated());
				RemoveInterpolationComponents(entityManager, entity);
			}

			// Entities are DELETED explicitly by the IsDeleted flag
			if (entityWithMeta.IsDeleted)
			{
				if (!entityWithMeta.Ownership)
				{
					log.Debug($"Deleting entity {entityWithMeta.Ownership} {entityWithMeta.EntityId}");
					if (entity != default)
					{
						if (entityManager.Exists(entity))
						{
							mapper.Remove(entityWithMeta.EntityId); // This internally requires entity to exist...
							entityManager.RemoveComponent<LingerSimulated>(entity);
							entityManager.DestroyEntity(entity);    // ...so this must be executed afterwards ...
						}
						else
						{
							log.Warning($"Entity has already been deleted: {entityWithMeta.EntityId} : {entity}");
						}
					}
					else
					{
						log.Warning($"Attempted to delete missing entity: {entityWithMeta.EntityId}");
					}
				}
				else
				{
					log.Warning($"Attempted to delete owned entity: {entityWithMeta.EntityId}");
				}

				return default;
			}

			return entity;
		}

		public void UpdateResendMask(EntityManager entityManager, Coherence.Ecs.SerializeEntityID entityId, uint componentTypeId, uint fieldMask)
		{
			var entity = mapper.ToUnityEntity(entityId);

			switch (componentTypeId)
			{

				case TypeIds.InternalWorldPosition:
				{
					var hasComponentData = entityManager.HasComponent<WorldPosition_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<WorldPosition_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalWorldOrientation:
				{
					var hasComponentData = entityManager.HasComponent<WorldOrientation_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<WorldOrientation_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalLocalUser:
				{
					var hasComponentData = entityManager.HasComponent<LocalUser_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<LocalUser_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalWorldPositionQuery:
				{
					var hasComponentData = entityManager.HasComponent<WorldPositionQuery_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<WorldPositionQuery_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalSessionBased:
				{
					var hasComponentData = entityManager.HasComponent<SessionBased_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<SessionBased_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericPrefabReference:
				{
					var hasComponentData = entityManager.HasComponent<GenericPrefabReference_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericPrefabReference_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericScale:
				{
					var hasComponentData = entityManager.HasComponent<GenericScale_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericScale_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt0_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt0_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt1_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt1_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt2_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt2_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt3:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt3_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt3_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt4:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt4_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt4_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt5:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt5_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt5_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt6:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt6_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt6_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt7:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt7_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt7_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt8:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt8_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt8_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt9:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt9_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt9_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat0_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat0_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat1_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat1_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat2_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat2_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat3:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat3_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat3_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat4:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat4_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat4_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat5:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat5_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat5_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat6:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat6_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat6_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat7:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat7_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat7_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat8:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat8_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat8_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat9:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat9_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat9_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector0_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldVector0_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector1_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldVector1_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector2_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldVector2_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector3:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector3_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldVector3_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldString0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString0_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldString0_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldString1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString1_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldString1_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldString2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString2_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldString2_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				case TypeIds.InternalGenericFieldString4:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString4_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldString4_Sync>(entity);

						syncData.resendMask |= fieldMask;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						log.Warning($"Entity or component has been destroyed: {entity} ComponentTypeId: {componentTypeId}");
					}
					break;
				}

				default:
				{
					log.Warning($"Unknown component", "component", componentTypeId);
					break;
				}
			}
		}

		public void UpdateHasReceivedConstructor(EntityManager entityManager, Coherence.Ecs.SerializeEntityID entityId, uint componentTypeId)
		{
			var entity = mapper.ToUnityEntity(entityId, false);

			// The entity has been deleted since the packet was sent
			if (destroyedEntities.ContainsKey(entity))
			{
				return;
			}

			if (!entityManager.Exists(entity))
			{
				log.Warning($"Entity does not exist: {entity} ComponentTypeId: {componentTypeId}");
				return;
			}

			if (!entityManager.HasComponent<Simulated>(entity))
			{
				// Ownership may have been lost since the packet was sent
				log.Trace($"Entity is missing Simulated: {entity} ComponentTypeId: {componentTypeId}");
				return;
			}

			var sim = entityManager.GetComponentData<Simulated>(entity);
			sim.hasReceivedConstructor = true;

			switch (componentTypeId)
			{

				case TypeIds.InternalWorldPosition:
				{
					var hasComponentData = entityManager.HasComponent<WorldPosition_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<WorldPosition_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} WorldPosition_Sync");
					}
					break;
				}

				case TypeIds.InternalWorldOrientation:
				{
					var hasComponentData = entityManager.HasComponent<WorldOrientation_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<WorldOrientation_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} WorldOrientation_Sync");
					}
					break;
				}

				case TypeIds.InternalLocalUser:
				{
					var hasComponentData = entityManager.HasComponent<LocalUser_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<LocalUser_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} LocalUser_Sync");
					}
					break;
				}

				case TypeIds.InternalWorldPositionQuery:
				{
					var hasComponentData = entityManager.HasComponent<WorldPositionQuery_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<WorldPositionQuery_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} WorldPositionQuery_Sync");
					}
					break;
				}

				case TypeIds.InternalSessionBased:
				{
					var hasComponentData = entityManager.HasComponent<SessionBased_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<SessionBased_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} SessionBased_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericPrefabReference:
				{
					var hasComponentData = entityManager.HasComponent<GenericPrefabReference_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericPrefabReference_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericPrefabReference_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericScale:
				{
					var hasComponentData = entityManager.HasComponent<GenericScale_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericScale_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericScale_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt0_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt0_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldInt0_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt1_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt1_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldInt1_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt2_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt2_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldInt2_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt3:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt3_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt3_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldInt3_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt4:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt4_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt4_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldInt4_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt5:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt5_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt5_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldInt5_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt6:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt6_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt6_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldInt6_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt7:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt7_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt7_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldInt7_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt8:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt8_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt8_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldInt8_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldInt9:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldInt9_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldInt9_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldInt9_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat0_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat0_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldFloat0_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat1_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat1_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldFloat1_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat2_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat2_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldFloat2_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat3:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat3_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat3_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldFloat3_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat4:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat4_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat4_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldFloat4_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat5:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat5_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat5_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldFloat5_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat6:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat6_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat6_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldFloat6_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat7:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat7_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat7_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldFloat7_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat8:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat8_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat8_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldFloat8_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldFloat9:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldFloat9_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldFloat9_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldFloat9_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector0_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldVector0_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldVector0_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector1_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldVector1_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldVector1_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector2_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldVector2_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldVector2_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldVector3:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldVector3_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldVector3_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldVector3_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldString0:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString0_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldString0_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldString0_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldString1:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString1_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldString1_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldString1_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldString2:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString2_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldString2_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldString2_Sync");
					}
					break;
				}

				case TypeIds.InternalGenericFieldString4:
				{
					var hasComponentData = entityManager.HasComponent<GenericFieldString4_Sync>(entity);
					if (hasComponentData)
					{
						var syncData = entityManager.GetComponentData<GenericFieldString4_Sync>(entity);
						syncData.hasReceivedConstructor = true;
						entityManager.SetComponentData(entity, syncData);
					} else
					{
						// Ownership may have been lost since the packet was sent
						log.Trace($"Sync component has been destroyed: {entity} GenericFieldString4_Sync");
					}
					break;
				}

				default:
				{
					log.Warning($"Unknown component", "component", componentTypeId);
					break;
				}
			}
		}

		public void UpdateResendDestroyed(EntityManager entityManager, Coherence.Ecs.SerializeEntityID entityId, AbsoluteSimulationFrame simulationFrame)
		{
			var entity = mapper.ToUnityEntity(entityId, false);
			if (entity == default)
			{
				log.Warning($"Destroyed entity {entityId} missing from mapper");
				return;
			}

			// Flag this entity destruction to be resent
			destroyedEntities[entity] = new DetectedEntityDeletion { Entity = entity, simulationFrame = (ulong)simulationFrame.Frame, serialized = false };
		}

		private void RemoveSyncComponents(EntityManager entityManager, Entity entity)
		{

			if (entityManager.HasComponent<WorldPosition_Sync>(entity))
			{
				entityManager.RemoveComponent<WorldPosition_Sync>(entity);
			}

			if (entityManager.HasComponent<WorldOrientation_Sync>(entity))
			{
				entityManager.RemoveComponent<WorldOrientation_Sync>(entity);
			}

			if (entityManager.HasComponent<LocalUser_Sync>(entity))
			{
				entityManager.RemoveComponent<LocalUser_Sync>(entity);
			}

			if (entityManager.HasComponent<WorldPositionQuery_Sync>(entity))
			{
				entityManager.RemoveComponent<WorldPositionQuery_Sync>(entity);
			}

			if (entityManager.HasComponent<SessionBased_Sync>(entity))
			{
				entityManager.RemoveComponent<SessionBased_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericPrefabReference_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericPrefabReference_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericScale_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericScale_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldInt0_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldInt0_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldInt1_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldInt1_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldInt2_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldInt2_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldInt3_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldInt3_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldInt4_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldInt4_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldInt5_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldInt5_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldInt6_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldInt6_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldInt7_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldInt7_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldInt8_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldInt8_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldInt9_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldInt9_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldFloat0_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldFloat0_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldFloat1_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldFloat1_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldFloat2_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldFloat2_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldFloat3_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldFloat3_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldFloat4_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldFloat4_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldFloat5_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldFloat5_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldFloat6_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldFloat6_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldFloat7_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldFloat7_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldFloat8_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldFloat8_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldFloat9_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldFloat9_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldVector0_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldVector0_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldVector1_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldVector1_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldVector2_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldVector2_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldVector3_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldVector3_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldString0_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldString0_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldString1_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldString1_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldString2_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldString2_Sync>(entity);
			}

			if (entityManager.HasComponent<GenericFieldString4_Sync>(entity))
			{
				entityManager.RemoveComponent<GenericFieldString4_Sync>(entity);
			}

		}

		private void RemoveInterpolationComponents(EntityManager entityManager, Entity entity)
		{


			if (entityManager.HasComponent<InterpolationComponent_Translation>(entity))
			{
				entityManager.RemoveComponent<InterpolationComponent_Translation>(entity);
			}
			if (entityManager.HasComponent<Sample_Translation>(entity))
			{
				entityManager.RemoveComponent<Sample_Translation>(entity);
			}



			if (entityManager.HasComponent<InterpolationComponent_Rotation>(entity))
			{
				entityManager.RemoveComponent<InterpolationComponent_Rotation>(entity);
			}
			if (entityManager.HasComponent<Sample_Rotation>(entity))
			{
				entityManager.RemoveComponent<Sample_Rotation>(entity);
			}




































































		}
	}
}
// ------------------ end of ReceiveUpdate.cs -----------------
#endregion



#region DynamicBufferData
// -----------------------------------
//  DynamicBufferData.cs
// -----------------------------------
			
namespace Coherence.Generated.FirstProject
{
	using Unity.Collections;
	using Unity.Entities;
	using Unity.Mathematics;
	using Unity.Transforms;

	

}


// ------------------ end of DynamicBufferData.cs -----------------
#endregion



#region EntityReplacer
// -----------------------------------
//  EntityReplacer.cs
// -----------------------------------
			
namespace Coherence.Generated.FirstProject
{
	using Unity.Entities;
	using Unity.Transforms;
	using UnityEngine;
	using Coherence.Replication.Client.Unity.Ecs;

	public class EntityReplacer {
		public static void Replace(EntityManager entityManager, Entity networkEntity, Entity newEntity)
		{
#if UNITY_EDITOR
			entityManager.SetName(newEntity, $"{networkEntity} (remote)");
#endif

			CopyComponents(entityManager, networkEntity, newEntity);

			var mapper = entityManager.World.GetExistingSystem<SyncSendSystem>().Sender.Mapper;
			if (!mapper.ToCoherenceEntityId(networkEntity, out var entityId))
			{
				Debug.LogError("Networked Entity not found in mapper: " + networkEntity); // Should not happen
			}

			mapper.Remove(entityId);
			mapper.Add(entityId, newEntity);
			entityManager.DestroyEntity(networkEntity);

			Debug.Log(string.Format("Replaced networked Entity {0} with new Entity {1}.", networkEntity, newEntity));
		}

		private static void CopyComponents(EntityManager entityManager, Entity source, Entity destination)
		{
		
            if(entityManager.HasComponent<Translation>(source))
			{
		        // Translation is built in
                var data = entityManager.GetComponentData<Translation>(source);
                entityManager.SetComponentData<Translation>(destination, data);
		
			}
		
            if(entityManager.HasComponent<Rotation>(source))
			{
		        // Rotation is built in
                var data = entityManager.GetComponentData<Rotation>(source);
                entityManager.SetComponentData<Rotation>(destination, data);
		
			}
		
            if(entityManager.HasComponent<LocalUser>(source))
			{
		        // LocalUser has fields, will copy it.			
                if(!entityManager.HasComponent<LocalUser>(destination)) {
                    entityManager.AddComponentData<LocalUser>(destination, new LocalUser());
                }
				var data = entityManager.GetComponentData<LocalUser>(source);
				entityManager.SetComponentData<LocalUser>(destination, data);
		
			}
		
            if(entityManager.HasComponent<WorldPositionQuery>(source))
			{
		        // WorldPositionQuery has fields, will copy it.			
                if(!entityManager.HasComponent<WorldPositionQuery>(destination)) {
                    entityManager.AddComponentData<WorldPositionQuery>(destination, new WorldPositionQuery());
                }
				var data = entityManager.GetComponentData<WorldPositionQuery>(source);
				entityManager.SetComponentData<WorldPositionQuery>(destination, data);
		
			}
		
            if(entityManager.HasComponent<SessionBased>(source))
			{
		        // SessionBased has no fields, will just add it.
		        entityManager.AddComponentData<SessionBased>(destination, new SessionBased());
		
			}
		
            if(entityManager.HasComponent<GenericPrefabReference>(source))
			{
		        // GenericPrefabReference has fields, will copy it.			
                if(!entityManager.HasComponent<GenericPrefabReference>(destination)) {
                    entityManager.AddComponentData<GenericPrefabReference>(destination, new GenericPrefabReference());
                }
				var data = entityManager.GetComponentData<GenericPrefabReference>(source);
				entityManager.SetComponentData<GenericPrefabReference>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericScale>(source))
			{
		        // GenericScale has fields, will copy it.			
                if(!entityManager.HasComponent<GenericScale>(destination)) {
                    entityManager.AddComponentData<GenericScale>(destination, new GenericScale());
                }
				var data = entityManager.GetComponentData<GenericScale>(source);
				entityManager.SetComponentData<GenericScale>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldInt0>(source))
			{
		        // GenericFieldInt0 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldInt0>(destination)) {
                    entityManager.AddComponentData<GenericFieldInt0>(destination, new GenericFieldInt0());
                }
				var data = entityManager.GetComponentData<GenericFieldInt0>(source);
				entityManager.SetComponentData<GenericFieldInt0>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldInt1>(source))
			{
		        // GenericFieldInt1 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldInt1>(destination)) {
                    entityManager.AddComponentData<GenericFieldInt1>(destination, new GenericFieldInt1());
                }
				var data = entityManager.GetComponentData<GenericFieldInt1>(source);
				entityManager.SetComponentData<GenericFieldInt1>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldInt2>(source))
			{
		        // GenericFieldInt2 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldInt2>(destination)) {
                    entityManager.AddComponentData<GenericFieldInt2>(destination, new GenericFieldInt2());
                }
				var data = entityManager.GetComponentData<GenericFieldInt2>(source);
				entityManager.SetComponentData<GenericFieldInt2>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldInt3>(source))
			{
		        // GenericFieldInt3 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldInt3>(destination)) {
                    entityManager.AddComponentData<GenericFieldInt3>(destination, new GenericFieldInt3());
                }
				var data = entityManager.GetComponentData<GenericFieldInt3>(source);
				entityManager.SetComponentData<GenericFieldInt3>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldInt4>(source))
			{
		        // GenericFieldInt4 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldInt4>(destination)) {
                    entityManager.AddComponentData<GenericFieldInt4>(destination, new GenericFieldInt4());
                }
				var data = entityManager.GetComponentData<GenericFieldInt4>(source);
				entityManager.SetComponentData<GenericFieldInt4>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldInt5>(source))
			{
		        // GenericFieldInt5 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldInt5>(destination)) {
                    entityManager.AddComponentData<GenericFieldInt5>(destination, new GenericFieldInt5());
                }
				var data = entityManager.GetComponentData<GenericFieldInt5>(source);
				entityManager.SetComponentData<GenericFieldInt5>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldInt6>(source))
			{
		        // GenericFieldInt6 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldInt6>(destination)) {
                    entityManager.AddComponentData<GenericFieldInt6>(destination, new GenericFieldInt6());
                }
				var data = entityManager.GetComponentData<GenericFieldInt6>(source);
				entityManager.SetComponentData<GenericFieldInt6>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldInt7>(source))
			{
		        // GenericFieldInt7 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldInt7>(destination)) {
                    entityManager.AddComponentData<GenericFieldInt7>(destination, new GenericFieldInt7());
                }
				var data = entityManager.GetComponentData<GenericFieldInt7>(source);
				entityManager.SetComponentData<GenericFieldInt7>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldInt8>(source))
			{
		        // GenericFieldInt8 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldInt8>(destination)) {
                    entityManager.AddComponentData<GenericFieldInt8>(destination, new GenericFieldInt8());
                }
				var data = entityManager.GetComponentData<GenericFieldInt8>(source);
				entityManager.SetComponentData<GenericFieldInt8>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldInt9>(source))
			{
		        // GenericFieldInt9 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldInt9>(destination)) {
                    entityManager.AddComponentData<GenericFieldInt9>(destination, new GenericFieldInt9());
                }
				var data = entityManager.GetComponentData<GenericFieldInt9>(source);
				entityManager.SetComponentData<GenericFieldInt9>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldFloat0>(source))
			{
		        // GenericFieldFloat0 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldFloat0>(destination)) {
                    entityManager.AddComponentData<GenericFieldFloat0>(destination, new GenericFieldFloat0());
                }
				var data = entityManager.GetComponentData<GenericFieldFloat0>(source);
				entityManager.SetComponentData<GenericFieldFloat0>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldFloat1>(source))
			{
		        // GenericFieldFloat1 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldFloat1>(destination)) {
                    entityManager.AddComponentData<GenericFieldFloat1>(destination, new GenericFieldFloat1());
                }
				var data = entityManager.GetComponentData<GenericFieldFloat1>(source);
				entityManager.SetComponentData<GenericFieldFloat1>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldFloat2>(source))
			{
		        // GenericFieldFloat2 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldFloat2>(destination)) {
                    entityManager.AddComponentData<GenericFieldFloat2>(destination, new GenericFieldFloat2());
                }
				var data = entityManager.GetComponentData<GenericFieldFloat2>(source);
				entityManager.SetComponentData<GenericFieldFloat2>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldFloat3>(source))
			{
		        // GenericFieldFloat3 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldFloat3>(destination)) {
                    entityManager.AddComponentData<GenericFieldFloat3>(destination, new GenericFieldFloat3());
                }
				var data = entityManager.GetComponentData<GenericFieldFloat3>(source);
				entityManager.SetComponentData<GenericFieldFloat3>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldFloat4>(source))
			{
		        // GenericFieldFloat4 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldFloat4>(destination)) {
                    entityManager.AddComponentData<GenericFieldFloat4>(destination, new GenericFieldFloat4());
                }
				var data = entityManager.GetComponentData<GenericFieldFloat4>(source);
				entityManager.SetComponentData<GenericFieldFloat4>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldFloat5>(source))
			{
		        // GenericFieldFloat5 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldFloat5>(destination)) {
                    entityManager.AddComponentData<GenericFieldFloat5>(destination, new GenericFieldFloat5());
                }
				var data = entityManager.GetComponentData<GenericFieldFloat5>(source);
				entityManager.SetComponentData<GenericFieldFloat5>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldFloat6>(source))
			{
		        // GenericFieldFloat6 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldFloat6>(destination)) {
                    entityManager.AddComponentData<GenericFieldFloat6>(destination, new GenericFieldFloat6());
                }
				var data = entityManager.GetComponentData<GenericFieldFloat6>(source);
				entityManager.SetComponentData<GenericFieldFloat6>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldFloat7>(source))
			{
		        // GenericFieldFloat7 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldFloat7>(destination)) {
                    entityManager.AddComponentData<GenericFieldFloat7>(destination, new GenericFieldFloat7());
                }
				var data = entityManager.GetComponentData<GenericFieldFloat7>(source);
				entityManager.SetComponentData<GenericFieldFloat7>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldFloat8>(source))
			{
		        // GenericFieldFloat8 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldFloat8>(destination)) {
                    entityManager.AddComponentData<GenericFieldFloat8>(destination, new GenericFieldFloat8());
                }
				var data = entityManager.GetComponentData<GenericFieldFloat8>(source);
				entityManager.SetComponentData<GenericFieldFloat8>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldFloat9>(source))
			{
		        // GenericFieldFloat9 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldFloat9>(destination)) {
                    entityManager.AddComponentData<GenericFieldFloat9>(destination, new GenericFieldFloat9());
                }
				var data = entityManager.GetComponentData<GenericFieldFloat9>(source);
				entityManager.SetComponentData<GenericFieldFloat9>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldVector0>(source))
			{
		        // GenericFieldVector0 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldVector0>(destination)) {
                    entityManager.AddComponentData<GenericFieldVector0>(destination, new GenericFieldVector0());
                }
				var data = entityManager.GetComponentData<GenericFieldVector0>(source);
				entityManager.SetComponentData<GenericFieldVector0>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldVector1>(source))
			{
		        // GenericFieldVector1 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldVector1>(destination)) {
                    entityManager.AddComponentData<GenericFieldVector1>(destination, new GenericFieldVector1());
                }
				var data = entityManager.GetComponentData<GenericFieldVector1>(source);
				entityManager.SetComponentData<GenericFieldVector1>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldVector2>(source))
			{
		        // GenericFieldVector2 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldVector2>(destination)) {
                    entityManager.AddComponentData<GenericFieldVector2>(destination, new GenericFieldVector2());
                }
				var data = entityManager.GetComponentData<GenericFieldVector2>(source);
				entityManager.SetComponentData<GenericFieldVector2>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldVector3>(source))
			{
		        // GenericFieldVector3 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldVector3>(destination)) {
                    entityManager.AddComponentData<GenericFieldVector3>(destination, new GenericFieldVector3());
                }
				var data = entityManager.GetComponentData<GenericFieldVector3>(source);
				entityManager.SetComponentData<GenericFieldVector3>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldString0>(source))
			{
		        // GenericFieldString0 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldString0>(destination)) {
                    entityManager.AddComponentData<GenericFieldString0>(destination, new GenericFieldString0());
                }
				var data = entityManager.GetComponentData<GenericFieldString0>(source);
				entityManager.SetComponentData<GenericFieldString0>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldString1>(source))
			{
		        // GenericFieldString1 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldString1>(destination)) {
                    entityManager.AddComponentData<GenericFieldString1>(destination, new GenericFieldString1());
                }
				var data = entityManager.GetComponentData<GenericFieldString1>(source);
				entityManager.SetComponentData<GenericFieldString1>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldString2>(source))
			{
		        // GenericFieldString2 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldString2>(destination)) {
                    entityManager.AddComponentData<GenericFieldString2>(destination, new GenericFieldString2());
                }
				var data = entityManager.GetComponentData<GenericFieldString2>(source);
				entityManager.SetComponentData<GenericFieldString2>(destination, data);
		
			}
		
            if(entityManager.HasComponent<GenericFieldString4>(source))
			{
		        // GenericFieldString4 has fields, will copy it.			
                if(!entityManager.HasComponent<GenericFieldString4>(destination)) {
                    entityManager.AddComponentData<GenericFieldString4>(destination, new GenericFieldString4());
                }
				var data = entityManager.GetComponentData<GenericFieldString4>(source);
				entityManager.SetComponentData<GenericFieldString4>(destination, data);
		
			}
		

        // Command buffers
        
            if (entityManager.HasComponent<GenericCommand>(source) &&
                !entityManager.HasComponent<GenericCommand>(destination)) {
                entityManager.AddBuffer<GenericCommand>(destination);
            }
            if (entityManager.HasComponent<GenericCommandRequest>(source) &&
                !entityManager.HasComponent<GenericCommandRequest>(destination)) {
                entityManager.AddBuffer<GenericCommandRequest>(destination);
            }
        

		}
	}
}


// ------------------ end of EntityReplacer.cs -----------------
#endregion



#region DetectAddedComponent
// -----------------------------------
//  DetectAddedComponent.cs
// -----------------------------------
			

namespace Coherence.Generated.Internal.Schema
{
	using global::Coherence.Generated.FirstProject;
	using Coherence.Replication.Client.Unity.Ecs;
	using Unity.Entities;
	using Unity.Transforms;

	[UpdateInGroup(typeof(PresentationSystemGroup))]
	[UpdateBefore(typeof(DetectRemovedComponentsSystem))]
    public class DetectAddedComponentsSystem : SystemBase
    {
        protected override void OnUpdate()
        {

            Entities.WithAll<Translation, Simulated>().WithNone<WorldPosition_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new WorldPosition_Sync 
				{
					howImportantAreYou = 1000
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<Rotation, Simulated>().WithNone<WorldOrientation_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new WorldOrientation_Sync 
				{
					howImportantAreYou = 1000
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.LocalUser, Simulated>().WithNone<LocalUser_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new LocalUser_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.WorldPositionQuery, Simulated>().WithNone<WorldPositionQuery_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new WorldPositionQuery_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.SessionBased, Simulated>().WithNone<SessionBased_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new SessionBased_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericPrefabReference, Simulated>().WithNone<GenericPrefabReference_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericPrefabReference_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericScale, Simulated>().WithNone<GenericScale_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericScale_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldInt0, Simulated>().WithNone<GenericFieldInt0_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldInt0_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldInt1, Simulated>().WithNone<GenericFieldInt1_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldInt1_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldInt2, Simulated>().WithNone<GenericFieldInt2_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldInt2_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldInt3, Simulated>().WithNone<GenericFieldInt3_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldInt3_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldInt4, Simulated>().WithNone<GenericFieldInt4_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldInt4_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldInt5, Simulated>().WithNone<GenericFieldInt5_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldInt5_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldInt6, Simulated>().WithNone<GenericFieldInt6_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldInt6_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldInt7, Simulated>().WithNone<GenericFieldInt7_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldInt7_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldInt8, Simulated>().WithNone<GenericFieldInt8_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldInt8_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldInt9, Simulated>().WithNone<GenericFieldInt9_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldInt9_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldFloat0, Simulated>().WithNone<GenericFieldFloat0_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldFloat0_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldFloat1, Simulated>().WithNone<GenericFieldFloat1_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldFloat1_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldFloat2, Simulated>().WithNone<GenericFieldFloat2_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldFloat2_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldFloat3, Simulated>().WithNone<GenericFieldFloat3_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldFloat3_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldFloat4, Simulated>().WithNone<GenericFieldFloat4_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldFloat4_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldFloat5, Simulated>().WithNone<GenericFieldFloat5_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldFloat5_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldFloat6, Simulated>().WithNone<GenericFieldFloat6_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldFloat6_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldFloat7, Simulated>().WithNone<GenericFieldFloat7_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldFloat7_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldFloat8, Simulated>().WithNone<GenericFieldFloat8_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldFloat8_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldFloat9, Simulated>().WithNone<GenericFieldFloat9_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldFloat9_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldVector0, Simulated>().WithNone<GenericFieldVector0_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldVector0_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldVector1, Simulated>().WithNone<GenericFieldVector1_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldVector1_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldVector2, Simulated>().WithNone<GenericFieldVector2_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldVector2_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldVector3, Simulated>().WithNone<GenericFieldVector3_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldVector3_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldString0, Simulated>().WithNone<GenericFieldString0_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldString0_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldString1, Simulated>().WithNone<GenericFieldString1_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldString1_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldString2, Simulated>().WithNone<GenericFieldString2_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldString2_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

            Entities.WithAll<global::Coherence.Generated.FirstProject.GenericFieldString4, Simulated>().WithNone<GenericFieldString4_Sync>().ForEach((Entity entity) =>
			{

				EntityManager.AddComponentData(entity, new GenericFieldString4_Sync 
				{
					howImportantAreYou = 600
				});
			}).WithStructuralChanges().Run();

			Dependency.Complete();
        }
    }
}
// ------------------ end of DetectAddedComponent.cs -----------------
#endregion



#region DetectChangedComponent
// -----------------------------------
//  DetectChangedComponent.cs
// -----------------------------------
			

namespace Coherence.Generated.Internal.Schema
{
	using global::Coherence.Generated.FirstProject;
	using Coherence.Replication.Client.Unity.Ecs;
	using Coherence.Replication.Unity;
	using Unity.Entities;
	using Unity.Transforms;

	[UpdateInGroup(typeof(PresentationSystemGroup))]
	[UpdateBefore(typeof(SyncSendSystem))]
    public class DetectChangedComponentsSystem : SystemBase
    {
	    protected override void OnUpdate()
	    {
		    var componentChanges = World.GetExistingSystem<SyncSendSystem>().ComponentChanges;
		    var localComponentChanges = componentChanges.AsParallelWriter();


			Entities.ForEach((Entity entity, ref WorldPosition_Sync sync, in Translation data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.Value.Equals(sync.lastSentData.Value) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalWorldPosition,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref WorldOrientation_Sync sync, in Rotation data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.Value.Equals(sync.lastSentData.Value) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalWorldOrientation,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref LocalUser_Sync sync, in global::Coherence.Generated.FirstProject.LocalUser data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.localIndex != sync.lastSentData.localIndex) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalLocalUser,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref WorldPositionQuery_Sync sync, in global::Coherence.Generated.FirstProject.WorldPositionQuery data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.position.Equals(sync.lastSentData.position) ) mask |= 0b00000000000000000000000000000001;



                if (data.radius != sync.lastSentData.radius) mask |= 0b00000000000000000000000000000010;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalWorldPositionQuery,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref SessionBased_Sync sync, in global::Coherence.Generated.FirstProject.SessionBased data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalSessionBased,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericPrefabReference_Sync sync, in global::Coherence.Generated.FirstProject.GenericPrefabReference data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.prefab.Equals(sync.lastSentData.prefab) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericPrefabReference,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericScale_Sync sync, in global::Coherence.Generated.FirstProject.GenericScale data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.Value.Equals(sync.lastSentData.Value) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericScale,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldInt0_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldInt0 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldInt0,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldInt1_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldInt1 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldInt1,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldInt2_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldInt2 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldInt2,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldInt3_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldInt3 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldInt3,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldInt4_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldInt4 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldInt4,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldInt5_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldInt5 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldInt5,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldInt6_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldInt6 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldInt6,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldInt7_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldInt7 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldInt7,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldInt8_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldInt8 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldInt8,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldInt9_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldInt9 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldInt9,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldFloat0_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldFloat0 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldFloat0,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldFloat1_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldFloat1 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldFloat1,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldFloat2_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldFloat2 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldFloat2,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldFloat3_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldFloat3 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldFloat3,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldFloat4_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldFloat4 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldFloat4,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldFloat5_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldFloat5 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldFloat5,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldFloat6_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldFloat6 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldFloat6,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldFloat7_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldFloat7 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldFloat7,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldFloat8_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldFloat8 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldFloat8,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldFloat9_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldFloat9 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (data.number != sync.lastSentData.number) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldFloat9,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldVector0_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldVector0 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.Value.Equals(sync.lastSentData.Value) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldVector0,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldVector1_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldVector1 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.Value.Equals(sync.lastSentData.Value) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldVector1,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldVector2_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldVector2 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.Value.Equals(sync.lastSentData.Value) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldVector2,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldVector3_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldVector3 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.Value.Equals(sync.lastSentData.Value) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldVector3,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldString0_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldString0 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.name.Equals(sync.lastSentData.name) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldString0,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldString1_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldString1 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.name.Equals(sync.lastSentData.name) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldString1,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldString2_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldString2 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.name.Equals(sync.lastSentData.name) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldString2,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

			Entities.ForEach((Entity entity, ref GenericFieldString4_Sync sync, in global::Coherence.Generated.FirstProject.GenericFieldString4 data, in Simulated simulate) =>
			{
				uint mask = 0;
				if (!sync.hasBeenSerialized) 
				{ 
					mask = 0xffffffff;
				}


                if (!data.name.Equals(sync.lastSentData.name) ) mask |= 0b00000000000000000000000000000001;



				if (mask != 0 || sync.resendMask != 0)
				{
					sync.accumulatedPriority += sync.howImportantAreYou;
					var componentChange = new ComponentChange
					{
						entity = entity,
						componentType = TypeIds.InternalGenericFieldString4,
						mask = mask,
						resendMask = sync.resendMask,
						entityHasReceivedConstructor = simulate.hasReceivedConstructor,
                        componentHasReceivedConstructor = sync.hasReceivedConstructor,
					};
					
					localComponentChanges.Add(sync.accumulatedPriority, componentChange);
				}
			}).ScheduleParallel();

		
			Dependency.Complete();
        }
    }
}
// ------------------ end of DetectChangedComponent.cs -----------------
#endregion



#region DetectRemovedComponent
// -----------------------------------
//  DetectRemovedComponent.cs
// -----------------------------------
			

namespace Coherence.Generated.Internal.Schema
{
	using global::Coherence.Generated.FirstProject;
	using Coherence;
	using Coherence.Replication.Client.Unity.Ecs;
	using Coherence.Replication.Unity;
	using Unity.Entities;
	using Unity.Transforms;

    [UpdateInGroup(typeof(PresentationSystemGroup))]
    [UpdateBefore(typeof(DetectChangedComponentsSystem))]
    public class DetectRemovedComponentsSystem : SystemBase
    {
        protected override void OnUpdate()
        {
            var simulationFrame = World.GetOrCreateSystem<CoherenceSimulationSystemGroup>().SimulationFrame;
			var componentChanges = World.GetExistingSystem<SyncSendSystem>().ComponentChanges;
			var localComponentChanges = componentChanges.AsParallelWriter();
			

			Entities.WithNone<Translation>().ForEach((Entity entity, ref WorldPosition_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalWorldPosition,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<Rotation>().ForEach((Entity entity, ref WorldOrientation_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalWorldOrientation,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.LocalUser>().ForEach((Entity entity, ref LocalUser_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalLocalUser,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.WorldPositionQuery>().ForEach((Entity entity, ref WorldPositionQuery_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalWorldPositionQuery,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.SessionBased>().ForEach((Entity entity, ref SessionBased_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalSessionBased,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericPrefabReference>().ForEach((Entity entity, ref GenericPrefabReference_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericPrefabReference,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericScale>().ForEach((Entity entity, ref GenericScale_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericScale,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldInt0>().ForEach((Entity entity, ref GenericFieldInt0_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldInt0,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldInt1>().ForEach((Entity entity, ref GenericFieldInt1_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldInt1,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldInt2>().ForEach((Entity entity, ref GenericFieldInt2_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldInt2,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldInt3>().ForEach((Entity entity, ref GenericFieldInt3_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldInt3,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldInt4>().ForEach((Entity entity, ref GenericFieldInt4_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldInt4,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldInt5>().ForEach((Entity entity, ref GenericFieldInt5_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldInt5,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldInt6>().ForEach((Entity entity, ref GenericFieldInt6_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldInt6,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldInt7>().ForEach((Entity entity, ref GenericFieldInt7_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldInt7,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldInt8>().ForEach((Entity entity, ref GenericFieldInt8_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldInt8,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldInt9>().ForEach((Entity entity, ref GenericFieldInt9_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldInt9,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldFloat0>().ForEach((Entity entity, ref GenericFieldFloat0_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldFloat0,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldFloat1>().ForEach((Entity entity, ref GenericFieldFloat1_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldFloat1,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldFloat2>().ForEach((Entity entity, ref GenericFieldFloat2_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldFloat2,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldFloat3>().ForEach((Entity entity, ref GenericFieldFloat3_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldFloat3,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldFloat4>().ForEach((Entity entity, ref GenericFieldFloat4_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldFloat4,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldFloat5>().ForEach((Entity entity, ref GenericFieldFloat5_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldFloat5,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldFloat6>().ForEach((Entity entity, ref GenericFieldFloat6_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldFloat6,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldFloat7>().ForEach((Entity entity, ref GenericFieldFloat7_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldFloat7,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldFloat8>().ForEach((Entity entity, ref GenericFieldFloat8_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldFloat8,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldFloat9>().ForEach((Entity entity, ref GenericFieldFloat9_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldFloat9,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldVector0>().ForEach((Entity entity, ref GenericFieldVector0_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldVector0,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldVector1>().ForEach((Entity entity, ref GenericFieldVector1_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldVector1,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldVector2>().ForEach((Entity entity, ref GenericFieldVector2_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldVector2,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldVector3>().ForEach((Entity entity, ref GenericFieldVector3_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldVector3,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldString0>().ForEach((Entity entity, ref GenericFieldString0_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldString0,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldString1>().ForEach((Entity entity, ref GenericFieldString1_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldString1,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldString2>().ForEach((Entity entity, ref GenericFieldString2_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldString2,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();

			Entities.WithNone<global::Coherence.Generated.FirstProject.GenericFieldString4>().ForEach((Entity entity, ref GenericFieldString4_Sync sync, in Simulated sim) =>
            {
                if (sync.deleteHasBeenSerialized)
                {
                    return;
                }
                
                if (sync.deletedAtTime == default)
                {
                    sync.deletedAtTime = (long)simulationFrame;
                }

                localComponentChanges.Add(sync.accumulatedPriority, new ComponentChange
                {
                    entity = entity,
                    componentType = TypeIds.InternalGenericFieldString4,
                    mask = 0,
                    resendMask = 0,
                });
            }).ScheduleParallel();


			Dependency.Complete();
        }
    }
}
// ------------------ end of DetectRemovedComponent.cs -----------------
#endregion



#region DetectDeletedEntity
// -----------------------------------
//  DetectDeletedEntity.cs
// -----------------------------------
			
namespace Coherence.Replication.Client.Unity.Ecs
{
	using Coherence.Replication.Unity;
	using global::Unity.Collections;
	using global::Unity.Entities;
	
	[AlwaysUpdateSystem]
	[UpdateInGroup(typeof(PresentationSystemGroup))]
	public class DetectDeletedEntitiesSystem : SystemBase
	{
		private NativeHashMap<Entity, DetectedEntityDeletion> destroyedEntities;
		private bool booted;
		
		private void Boot()
		{
			destroyedEntities = World.GetExistingSystem<NetworkSystem>().DestroyedEntities;
			booted = false;
		}
		
		protected override void OnUpdate()
		{
			if (!booted)
			{
				Boot();
			}
			
			var simulationFrame = World.GetExistingSystem<CoherenceSimulationSystemGroup>().SimulationFrame;
			
			// Ensure all simulated entities have their system state component in order to track entity destruction
			Entities.WithNone<LingerSimulated>().ForEach((Entity entity, int entityInQueryIndex, in Simulated simulate) =>
			{
				EntityManager.AddComponentData(entity, new LingerSimulated());
			}).WithStructuralChanges().WithoutBurst().Run();
			
			// Keep track of locally destroyed entities so that SyncReceiveSystem does not revive them
			var commandBuffer = World.GetExistingSystem<EndSimulationEntityCommandBufferSystem>().CreateCommandBuffer();
			Entities.WithNone<Simulated>().ForEach((Entity entity, int entityInQueryIndex, in LingerSimulated sync) =>
			{
				destroyedEntities.TryAdd(entity, new DetectedEntityDeletion { Entity = entity, simulationFrame = simulationFrame, serialized = false });
				commandBuffer.RemoveComponent<LingerSimulated>(entity);
			}).WithoutBurst().Run();
			
			// Clear entities that were locally destroyed over 10s ago, to prevent hashmap from overflowing  
			var kv = destroyedEntities.GetKeyValueArrays(Allocator.TempJob);
			for (var i = 0; i < kv.Values.Length; i++)
			{
				if (simulationFrame > kv.Values[i].simulationFrame + 60 * 10)
				{
					destroyedEntities.Remove(kv.Keys[i]);
				}
			}
			kv.Dispose();
		}
	}
}

// ------------------ end of DetectDeletedEntity.cs -----------------
#endregion



#region InjectSender
// -----------------------------------
//  InjectSender.cs
// -----------------------------------
			

namespace Coherence.Generated.Internal.Schema
{
	using global::Coherence.Generated.FirstProject;
    using Coherence.Replication.Client.Unity.Ecs;
    using Unity.Entities;

    [AlwaysUpdateSystem]
    [UpdateInGroup(typeof(PresentationSystemGroup))]
    [UpdateBefore(typeof(DetectDeletedEntitiesSystem))]
    public class InjectSenderSystem : SystemBase
    {
        protected override void OnUpdate()
        {
            if (World.GetExistingSystem<SyncSendSystem>().Sender != null)
            {
                return;
            }
            
            var netSys = World.GetOrCreateSystem<NetworkSystem>();
            var wrapper = new SerializeComponentUpdatesWrapper(netSys.Mapper);
            var sender = new Sender(World, netSys.Connector, netSys.Mapper, wrapper, netSys.SentPacketsCache, netSys.Log);
            World.GetExistingSystem<SyncSendSystem>().Sender = sender;
        }
    }
}
// ------------------ end of InjectSender.cs -----------------
#endregion



#region EventData
// -----------------------------------
//  EventData.cs
// -----------------------------------
			
namespace Coherence.Generated.FirstProject
{
	using Unity.Collections;
	using Unity.Entities;
	using Unity.Mathematics;
	using Unity.Transforms;

	

}


// ------------------ end of EventData.cs -----------------
#endregion



#region SendEvent
// -----------------------------------
//  SendEvent.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
    using UnityEngine;
    using Unity.Entities;
    using global::Coherence.Generated.FirstProject;

    // TODO: Remove some of these imports
    using Message;
    using Message.Serializer.Serialize;
    using Coherence.Brisk.Connect;
    using Coherence.Brook;
    using Coherence.Log;
    using Replication.Client.Unity.Ecs;
    using Replication.Unity;

    [UpdateInGroup(typeof(CoherenceSimulationSystemGroup))]
    [AlwaysUpdateSystem]
    public class SendEventSystem : SystemBase
    {
        private bool isBooted;
	    private Sender cachedSender;
		private MessageSerializers messageSerializers;

        void BootUp()
        {
            var netSys = World.GetOrCreateSystem<NetworkSystem>();
			messageSerializers = new MessageSerializers(netSys.Mapper);
        }

	    protected override void OnUpdate()
	    {
	        if (!isBooted)
	        {
		        BootUp();
		        isBooted = true;
	        }

		    if (cachedSender == null)
		    {
			    cachedSender = World.GetExistingSystem<SyncSendSystem>().Sender;
			    if (cachedSender == null)
			    {
				    return;
			    }
            }

            var burstSender = cachedSender;
            var mapper = cachedSender.Mapper;



        }
    }

}


// ------------------ end of SendEvent.cs -----------------
#endregion



#region DeleteEvent
// -----------------------------------
//  DeleteEvent.cs
// -----------------------------------
			

namespace Coherence.Generated.Internal.Schema
{
	using global::Coherence.Generated.FirstProject;
	using Coherence.Replication.Client.Unity.Ecs;
	using Unity.Entities;
	using Unity.Transforms;

	[AlwaysUpdateSystem]
	[UpdateInGroup(typeof(CoherenceSimulationSystemGroup))]
	[UpdateAfter(typeof(SyncSendSystem))]
	public class DeleteEventSystem : SystemBase
	{
		protected override void OnUpdate()
		{

			Dependency.Complete();
		}
	}
}
// ------------------ end of DeleteEvent.cs -----------------
#endregion



#region EventDeserializer
// -----------------------------------
//  EventDeserializer.cs
// -----------------------------------
			
namespace Coherence.Generated.Internal.Schema
{
	using global::Coherence.Generated.FirstProject;
	using Coherence.Log;
	using Unity.Entities;
	using Replication.Client.Unity.Ecs;
	using Coherence.Replication.Unity;

	public class PerformEvents : IPerformEvent
	{
        private MessageDeserializers messageDeserializers;

        public PerformEvents(UnityMapper mapper)
        {
            messageDeserializers = new MessageDeserializers(mapper);
        }

		public void PerformEvent(EntityManager mgr, Entity entity, uint eventTypeID,
                                 Coherence.Replication.Protocol.Definition.IInBitStream bitStream, ILog log)
		{

		}
	}
}


// ------------------ end of EventDeserializer.cs -----------------
#endregion
